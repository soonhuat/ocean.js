{"version":3,"file":"lib.module.js","sources":["../src/config/Config.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/DatatokenName.ts","../src/utils/DdoHelpers.ts","../src/utils/FetchHelper.ts","../src/utils/Logger.ts","../src/utils/General.ts","../src/utils/minAbi.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/config/ConfigHelper.ts","../src/contracts/SmartContract.ts","../src/contracts/SmartContractWithAddress.ts","../src/contracts/Dispenser.ts","../src/contracts/FixedRateExchange.ts","../src/contracts/Router.ts","../src/contracts/NFT.ts","../src/contracts/Datatoken.ts","../src/contracts/NFTFactory.ts","../src/contracts/ve/VeOcean.ts","../src/contracts/ve/VeFeeDistributor.ts","../src/contracts/ve/VeFeeEstimate.ts","../src/contracts/ve/VeAllocate.ts","../src/contracts/df/DfRewards.ts","../src/contracts/df/DfStrategyV1.ts","../src/services/Aquarius.ts","../src/services/Provider.ts"],"sourcesContent":["import { AbiItem } from 'web3-utils/types'\nimport { LogLevel } from '../utils'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public nftFactoryAddress?: string\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, goerli, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n\n  veAllocate?: string\n  veOCEAN?: string\n  veDelegation?: string\n  veFeeDistributor?: string\n  veDelegationProxy?: string\n  DFRewards?: string\n  DFStrategyV1?: string\n  veFeeEstimate?: string\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\nexport const MAX_UINT_256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\nexport const FEE_HISTORY_NOT_SUPPORTED =\n  'Returned error: Method eth_feeHistory not supported.'\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { Config } from '../config'\nimport { minAbi, GASLIMIT_DEFAULT, LoggerInstance, FEE_HISTORY_NOT_SUPPORTED } from '.'\nimport { TransactionReceipt } from 'web3-core'\n\nconst MIN_GAS_FEE_POLYGON = 30000000000 // minimum recommended 30 gwei polygon main and mumbai fees\nconst POLYGON_NETWORK_ID = 137\nconst MUMBAI_NETWORK_ID = 80001\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  gasFeeMultiplier: number\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (gasFeeMultiplier)\n    return x\n      .multipliedBy(gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, token)\n  let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n  if (decimals === '0') {\n    decimals = 18\n  }\n\n  const amountFormatted = new BigNumber(amount).div(\n    new BigNumber(10).exponentiatedBy(decimals)\n  )\n\n  BigNumber.config({ EXPONENTIAL_AT: 50 })\n  return amountFormatted.toString()\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, token)\n  let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n  if (decimals === '0') {\n    decimals = 18\n  }\n  BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n  const amountFormatted = new BigNumber(amount).times(\n    new BigNumber(10).exponentiatedBy(decimals)\n  )\n  return amountFormatted.toFixed(0)\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function calculateEstimatedGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<number> {\n  const estimatedGas = await functionToEstimateGas\n    .apply(null, args)\n    .estimateGas({ from }, (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas))\n  return estimatedGas\n}\n\n/**\n * Send the transation on chain\n * @param {string} from account that calls the function\n * @param {any} estGas estimated gas for the transaction\n * @param {Web3} web3 web3 objcet\n * @param {Function} functionToSend function that we need to send\n * @param {...any[]} args arguments of the function\n * @return {Promise<any>} transaction receipt\n */\nexport async function sendTx(\n  from: string,\n  estGas: number,\n  web3: Web3,\n  gasFeeMultiplier: number,\n  functionToSend: Function,\n  ...args: any[]\n): Promise<TransactionReceipt> {\n  const sendTxValue: Record<string, any> = {\n    from,\n    gas: estGas + 1\n  }\n  const networkId = await web3.eth.getChainId()\n  try {\n    const feeHistory = await web3.eth.getFeeHistory(1, 'latest', [75])\n    if (feeHistory && feeHistory?.baseFeePerGas?.[0] && feeHistory?.reward?.[0]?.[0]) {\n      let aggressiveFee = new BigNumber(feeHistory?.reward?.[0]?.[0])\n      if (gasFeeMultiplier > 1) {\n        aggressiveFee = aggressiveFee.multipliedBy(gasFeeMultiplier)\n      }\n\n      sendTxValue.maxPriorityFeePerGas = aggressiveFee\n        .integerValue(BigNumber.ROUND_DOWN)\n        .toString(10)\n\n      sendTxValue.maxFeePerGas = aggressiveFee\n        .plus(new BigNumber(feeHistory?.baseFeePerGas?.[0]).multipliedBy(2))\n        .integerValue(BigNumber.ROUND_DOWN)\n        .toString(10)\n\n      // if network is polygon and mumbai and fees is lower than the 30 gwei trashold, sets MIN_GAS_FEE_POLYGON\n      sendTxValue.maxPriorityFeePerGas =\n        (networkId === MUMBAI_NETWORK_ID || networkId === POLYGON_NETWORK_ID) &&\n        new BigNumber(sendTxValue.maxPriorityFeePerGas).lte(\n          new BigNumber(MIN_GAS_FEE_POLYGON)\n        )\n          ? new BigNumber(MIN_GAS_FEE_POLYGON)\n              .integerValue(BigNumber.ROUND_DOWN)\n              .toString(10)\n          : sendTxValue.maxPriorityFeePerGas\n\n      sendTxValue.maxFeePerGas =\n        (networkId === MUMBAI_NETWORK_ID || networkId === POLYGON_NETWORK_ID) &&\n        new BigNumber(sendTxValue.maxFeePerGas).lte(new BigNumber(MIN_GAS_FEE_POLYGON))\n          ? new BigNumber(MIN_GAS_FEE_POLYGON)\n              .integerValue(BigNumber.ROUND_DOWN)\n              .toString(10)\n          : sendTxValue.maxFeePerGas\n    } else {\n      sendTxValue.gasPrice = await getFairGasPrice(web3, gasFeeMultiplier)\n    }\n  } catch (err) {\n    err?.message === FEE_HISTORY_NOT_SUPPORTED &&\n      LoggerInstance.log(\n        'Not able to use EIP 1559, getFeeHistory method not suported by network.'\n      )\n    sendTxValue.gasPrice = await getFairGasPrice(web3, gasFeeMultiplier)\n  }\n\n  const trxReceipt = await functionToSend.apply(null, args).send(sendTxValue)\n  return trxReceipt\n}\n","import wordListDefault from './data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\n\nexport function generateDid(nftAddress: string, chainId: number): string {\n  nftAddress = Web3.utils.toChecksumAddress(nftAddress)\n  const checksum = sha256(nftAddress + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  return sha256(data).toString()\n}\n","import fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types'\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const headResponse = await fetch(url, { method: 'HEAD' })\n  const contentHeader = headResponse.headers.get('content-disposition')\n  const fileName = contentHeader?.split('=')[1] ? contentHeader?.split('=')[1] : 'file'\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'blob'\n  xhr.open('GET', url)\n  xhr.onload = () => {\n    const blobURL = window.URL.createObjectURL(xhr.response)\n    const a = document.createElement('a')\n    a.href = blobURL\n    a.setAttribute('download', fileName)\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    window.URL.revokeObjectURL(blobURL)\n  }\n  xhr.send(null)\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n","/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","import Web3 from 'web3'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport {\n  amountToUnits,\n  calculateEstimatedGas,\n  unitsToAmount,\n  minAbi,\n  sendTx,\n  LoggerInstance\n} from '.'\nimport { Config } from '../config'\nimport { ReceiptOrEstimate } from '../@types'\n\n/**\n * Approve spender to spent amount tokens\n * @param {Web3} web3\n * @param {Config} config\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 Datatokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {boolean} estimateGas  if true, returns the estimate gas cost for calling the method\n */\nexport async function approve<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return <ReceiptOrEstimate<G>>new Decimal(currentAllowence).toNumber()\n    }\n  }\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  const trxReceipt = await sendTx(\n    account,\n    estGas + 1,\n    web3,\n    config?.gasFeeMultiplier,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n  return <ReceiptOrEstimate<G>>trxReceipt\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {Web3} web3\n * @param {Config} config\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {boolean} estimateGas  if true, returns the estimate gas cost for calling the method\n */\nexport async function approveWei<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return <ReceiptOrEstimate<G>>new Decimal(currentAllowence).toNumber()\n    }\n  }\n  let result = null\n\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  try {\n    result = await sendTx(\n      account,\n      estGas + 1,\n      web3,\n      config?.gasFeeMultiplier,\n      tokenContract.methods.approve,\n      spender,\n      amount\n    )\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 Datatokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  const trxReceipt = await sendTx(\n    account,\n    estGas + 1,\n    web3,\n    config?.gasFeeMultiplier,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n  return <ReceiptOrEstimate<G>>trxReceipt\n}\n\n/**\n * Get Allowance for any Datatoken\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any Datatoken\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get decimals for any Datatoken\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","// eslint-disable-next-line import/no-named-default\n// import { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport { Config } from '.'\nimport { LoggerInstance } from '../utils'\n// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '../../address.json'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'https://v4.provider.oceanprotocol.com',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://172.15.0.5:5000', // use http://127.0.0.1:5000/ if running on macOS\n    providerUri: 'http://172.15.0.4:8030', // use http://127.0.0.1:8030/ if running on macOS\n    subgraphUri: 'https://172.15.0.15:8000' // use http://127.0.0.1:9000/ if running on macOS\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 5,\n    network: 'goerli',\n    nodeUri: 'https://goerli.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://goerli.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN',\n    gasFeeMultiplier: 1.6\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 81001,\n    network: 'polygonedge',\n    nodeUri: 'https://rpc-edgenet.polygon.technology',\n    providerUri: 'https://v4.provider.goerli.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://explorer-edgenet.polygon.technology/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      const {\n        FixedPrice,\n        Dispenser,\n        ERC721Factory,\n        OPFCommunityFeeCollector,\n        Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate\n      } = customAddresses[network]\n      configAddresses = {\n        nftFactoryAddress: ERC721Factory,\n        opfCommunityFeeCollector: OPFCommunityFeeCollector,\n        fixedRateExchangeAddress: FixedPrice,\n        dispenserAddress: Dispenser,\n        oceanTokenAddress: Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate,\n        ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          nftFactoryAddress: ERC721Factory,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(\n        `No config found for given network '${network}' filter by '${filterBy}'`\n      )\n      return null\n    }\n\n    LoggerInstance.debug(\n      `getConfig getAddressesFromEnv after filter by '${filterBy}' to network'${config?.network}'`\n    )\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Web3 from 'web3'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport { Config, ConfigHelper } from '../config'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from '../utils'\n\nexport abstract class SmartContract {\n  public web3: Web3\n  public config: Config\n  public abi: AbiItem | AbiItem[]\n\n  abstract getDefaultAbi(): AbiItem | AbiItem[]\n\n  /**\n   * Instantiate the smart contract.\n   * @param {Web3} web3\n   * @param {string | number} network Network id or name\n   * @param {Config} config Configutation of the smart contract\n   * @param {AbiItem | AbiItem[]} abi ABI of the smart contract\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[]\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.abi = abi || (this.getDefaultAbi() as AbiItem[])\n  }\n\n  protected async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  protected async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  protected async getFairGasPrice(): Promise<string> {\n    return getFairGasPrice(this.web3, this.config?.gasFeeMultiplier)\n  }\n\n  protected getContract(\n    address: string,\n    account?: string,\n    abi?: AbiItem | AbiItem[]\n  ): Contract {\n    const contract = new this.web3.eth.Contract(abi || this.abi, address, {\n      from: account\n    })\n    return setContractDefaults(contract, this.config)\n  }\n}\n","import Web3 from 'web3'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\n\nexport abstract class SmartContractWithAddress extends SmartContract {\n  public address: string\n  public contract: Contract\n\n  /**\n   * Instantiate the smart contract.\n   * @param {string} address Address of the smart contract\n   * @param {Web3} web3\n   * @param {string | number} network Network id or name\n   * @param {Config} config Configutation of the smart contract\n   * @param {AbiItem | AbiItem[]} abi ABI of the smart contract\n   */\n  constructor(\n    address: string,\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[]\n  ) {\n    super(web3, network, config, abi)\n    this.address = address\n    this.contract = this.getContract(this.address)\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport Decimal from 'decimal.js'\nimport DispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport { calculateEstimatedGas, sendTx } from '../utils'\nimport { Datatoken } from './Datatoken'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\nimport { DispenserToken, ReceiptOrEstimate } from '../@types'\n\nexport class Dispenser extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return DispenserAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    const status: DispenserToken = await this.contract.methods.status(dtAdress).call()\n    if (!status) {\n      throw new Error(`Np dispenser found for the given datatoken address`)\n    }\n    status.maxTokens = this.web3.utils.fromWei(status.maxTokens)\n    status.maxBalance = this.web3.utils.fromWei(status.maxBalance)\n    status.balance = this.web3.utils.fromWei(status.balance)\n    return status\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async create<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Call createFixedRate contract method\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async activate<G extends boolean = false>(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async deactivate<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.deactivate,\n      dtAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deactivate,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async dispense<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async ownerWithdraw<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.ownerWithdraw,\n      dtAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import FixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { AbiItem } from 'web3-utils/types'\nimport { calculateEstimatedGas, sendTx, ZERO_ADDRESS } from '../utils'\nimport { PriceAndFees, FeesInfo, FixedPriceExchange, ReceiptOrEstimate } from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\nexport class FixedRateExchange extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return FixedRateExchangeAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async buyDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sell datatokenAmount while expecting at least minBaseTokenAmount\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async sellDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setRate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newRate: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowedSwapper\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDatatokenSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBasetokenSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenDatatokensOut - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenDatatokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const outDT = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBasetokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const amount = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, amount[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const exchange: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    exchange.dtDecimals = exchange.dtDecimals.toString()\n    exchange.btDecimals = exchange.btDecimals.toString()\n    exchange.dtBalance = await this.unitsToAmount(\n      exchange.datatoken,\n      exchange.dtBalance,\n      +exchange.dtDecimals\n    )\n    exchange.btBalance = await this.unitsToAmount(\n      exchange.baseToken,\n      exchange.btBalance,\n      +exchange.btDecimals\n    )\n    exchange.dtSupply = await this.unitsToAmount(\n      exchange.datatoken,\n      exchange.dtSupply,\n      +exchange.dtDecimals\n    )\n    exchange.btSupply = await this.unitsToAmount(\n      exchange.baseToken,\n      exchange.btSupply,\n      +exchange.btDecimals\n    )\n    exchange.fixedRate = this.web3.utils.fromWei(exchange.fixedRate)\n    exchange.exchangeId = exchangeId\n    return exchange\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const feesInfo: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    feesInfo.opcFee = this.web3.utils.fromWei(feesInfo.opcFee.toString())\n    feesInfo.marketFee = this.web3.utils.fromWei(feesInfo.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    feesInfo.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      feesInfo.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    feesInfo.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      feesInfo.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    feesInfo.exchangeId = exchangeId\n    return feesInfo\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const active = await this.contract.methods.isActive(exchangeId).call()\n    return active\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activateMint<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivateMint<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectBasetokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectMarketFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectMarketFee,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectMarketFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectOceanFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectOceanFee,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectOceanFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    const address = await this.contract.methods.opcCollector().call()\n    return address\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  public async getRouter(): Promise<string> {\n    const address = await this.contract.methods.router().call()\n    return address\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    const address = await (await this.getExchange(exchangeId)).exchangeOwner\n    return address\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFeeCollector<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport FactoryRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { calculateEstimatedGas, sendTx } from '../utils'\nimport { Operation, ReceiptOrEstimate } from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return FactoryRouter.abi as AbiItem[]\n  }\n\n  /**\n   * buyDatatokenBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<ReceiptOrEstimate>} Transaction receipt\n   */\n  public async buyDatatokenBatch<G extends boolean = false>(\n    address: string,\n    operations: Operation[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.buyDTBatch,\n      operations\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.buyDTBatch,\n      operations\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.contract.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.contract.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.contract.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.contract.methods.factory().call()\n  }\n\n  /**\n   * Adds a token to the list of tokens with reduced fees\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addApprovedToken,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a token if exists from the list of tokens with reduced fees\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeApprovedToken,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeApprovedToken,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of fixed rate contracts\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addFixedRateContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of fixed rate contracts\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeFixedRateContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of dispensers\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addDispenserContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of dispensers\n   * @param {String} address\n   * @param {String} tokenAddress address Contract to be removed\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeDispenserContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.contract.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.contract.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Updates OP Community Fees\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async updateOPCFee<G extends boolean = false>(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport ERC721Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport { generateDtName, calculateEstimatedGas, sendTx } from '../utils'\nimport {\n  MetadataProof,\n  MetadataAndTokenURI,\n  NftRoles,\n  ReceiptOrEstimate\n} from '../@types'\nimport { SmartContract } from './SmartContract'\n\nexport class Nft extends SmartContract {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC721Template.abi as AbiItem[]\n  }\n\n  /**\n   * Create new ERC20 Datatoken - only user with DatatokenDeployer permission can succeed\n   * @param {String} nftAddress NFT address\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the Datatoken\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 Datatoken address\n   */\n  public async createDatatoken<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    estimateGas?: G\n  ): Promise<G extends false ? string : number> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n    if (estimateGas) return <G extends false ? string : number>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    return trxReceipt?.events?.TokenCreated?.returnValues?.[0]\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addManager,\n      manager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeManager,\n      manager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer User adress which is going to have DatatokenDeployer permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      datatokenDeployer\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addToCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer Address of the user to be revoked DatatokenDeployer Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === datatokenDeployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor DatatokenDeployer`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      datatokenDeployer\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFromCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to remove all ROLES at NFT level: Managers, DatatokenDeployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at Datatoken level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.cleanPermissions\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async transferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await calculateEstimatedGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      nftOwner,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async safeTransferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await calculateEstimatedGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      nftOwner,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates or update Metadata cached by Aquarius. Also, updates the METADATA_DECRYPTOR key\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadata<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataAndTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await calculateEstimatedGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      metadataUpdater,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataState<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress NFT contract address\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    data: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setTokenURI,\n      '1',\n      data\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setTokenURI,\n      '1',\n      data\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<NftRoles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<NftRoles> {\n    const nftContract = this.getContract(nftAddress)\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = this.getContract(nftAddress)\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users DatatokenDeployer role\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(\n    nftAddress: string,\n    address: string\n  ): Promise<boolean> {\n    const nftContract = this.getContract(nftAddress)\n    const isDatatokenDeployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isDatatokenDeployer\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param key Key of the data to be stored into 725Y standard\n   * @param value Data to be stored into 725Y standard\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData(\n    nftAddress: string,\n    address: string,\n    key: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getNftPermissions(nftAddress, address)).store !== true) {\n      throw new Error(`User is not ERC20 store updater`)\n    }\n\n    const nftContract = this.getContract(nftAddress)\n\n    const keyHash = this.web3.utils.keccak256(key)\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    return trxReceipt\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress NFT contract address\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const keyHash = this.web3.utils.keccak256(key)\n    const data = await nftContract.methods.getData(keyHash).call()\n    return data ? this.web3.utils.hexToAscii(data) : null\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress NFT contract address\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport ERC20Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport ERC20TemplateEnterprise from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport { amountToUnits, sendTx, calculateEstimatedGas, ZERO_ADDRESS } from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee,\n  DispenserParams,\n  OrderParams,\n  DatatokenRoles,\n  ReceiptOrEstimate\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\n\nexport class Datatoken extends SmartContract {\n  public abiEnterprise: AbiItem | AbiItem[]\n  public nft: Nft\n\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC20Template.abi as AbiItem[]\n  }\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[],\n    abiEnterprise?: AbiItem | AbiItem[]\n  ) {\n    super(web3, network, config, abi)\n    this.abiEnterprise = abiEnterprise || (ERC20TemplateEnterprise.abi as AbiItem[])\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async approve<G extends boolean = false>(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async createFixedRate<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint === false ? 0 : 1\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async createDispenser<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    dispenserParams.withMint = dispenserParams.withMint !== false\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async mint<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.getPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await calculateEstimatedGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n      if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n      const trxReceipt = await sendTx(\n        address,\n        estGas + 1,\n        this.web3,\n        this.config?.gasFeeMultiplier,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n      return <ReceiptOrEstimate<G>>trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Add Minter for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.addMinter,\n      minter\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.addMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.removeMinter,\n      minter\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.removeMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addPaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removePaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setPaymentCollector<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    const isPaymentManager = (await this.getPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isDatatokenDeployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isDatatokenDeployer) {\n      throw new Error(`Caller is not Fee Manager, owner or Datatoken Deployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transferWei<G extends boolean = false>(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.transfer,\n      toAddress,\n      amount\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.transfer,\n      toAddress,\n      amount\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async startOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async reuseOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.reuseOrder,\n      orderTxId,\n      providerFees\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.reuseOrder,\n      orderTxId,\n      providerFees\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromFreAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, null, this.abiEnterprise)\n\n    const freContractParams = await this.getFreOrderParams(freParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freContractParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freContractParams\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromDispenserAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, null, this.abiEnterprise)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(dtAddress)) into NFT 725 Store\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    value: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setData,\n      valueHex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setData,\n      valueHex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Clean Datatoken level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 Datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.cleanPermissions\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Returns ERC20 Datatoken user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<DatatokenRoles>}\n   */\n  public async getPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<DatatokenRoles> {\n    const dtContract = this.getContract(dtAddress)\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token symbol\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getSymbol(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const symbol = await dtContract.methods.symbol().call()\n    return symbol\n  }\n\n  /** It returns the name of the token\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getName(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const name = await dtContract.methods.name().call()\n    return name\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = this.getContract(dtAddress)\n    const isDatatokenDeployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isDatatokenDeployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = this.getContract(datatokenAddress, address)\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee<G extends boolean = false>(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(datatokenAddress, address)\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = this.getContract(datatokenAddress, address)\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n\n  private async getFreOrderParams(freParams: FreOrderParams): Promise<any> {\n    return {\n      exchangeContract: freParams.exchangeContract,\n      exchangeId: freParams.exchangeId,\n      maxBaseTokenAmount: await amountToUnits(\n        this.web3,\n        freParams.baseTokenAddress,\n        freParams.maxBaseTokenAmount,\n        freParams.baseTokenDecimals\n      ),\n      swapMarketFee: await amountToUnits(\n        this.web3,\n        freParams.baseTokenAddress,\n        freParams.swapMarketFee,\n        freParams.baseTokenDecimals\n      ),\n\n      marketFeeAddress: freParams.marketFeeAddress\n    }\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport ERC721Factory from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport { generateDtName, calculateEstimatedGas, ZERO_ADDRESS, sendTx } from '../utils'\nimport {\n  FreCreationParams,\n  DatatokenCreateParams,\n  DispenserCreationParams,\n  NftCreateData,\n  Template,\n  TokenOrder,\n  ReceiptOrEstimate\n} from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC721Factory.abi as AbiItem[]\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT<G extends boolean = false>(\n    address: string,\n    nftData: NftCreateData,\n    estimateGas?: G\n  ): Promise<G extends false ? string : number> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    if (estimateGas) return <G extends false ? string : number>estGas\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    return trxReceipt?.events?.NFTCreated?.returnValues?.[0]\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const nftCount = await this.contract.methods.getCurrentNFTCount().call()\n    return nftCount\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const tokenCount = await this.contract.methods.getCurrentTokenCount().call()\n    return tokenCount\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const owner = await this.contract.methods.owner().call()\n    return owner\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.contract.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of Datatoken Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.contract.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.contract.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken (ERC20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.contract.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if Datatoken is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.contract.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.contract.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.add721TokenTemplate,\n      templateAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.add721TokenTemplate,\n      templateAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.disable721TokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addTokenTemplate,\n      templateAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.disableTokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ Datatoken contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - ERC20 Datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async startMultipleTokenOrder<G extends boolean = false>(\n    address: string,\n    orders: TokenOrder[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.startMultipleTokenOrder,\n      orders\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatoken\n   *      Creates a new NFT, then a Datatoken,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for Datatoken creation\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n\n  public async createNftWithDatatoken<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatokenWithFixedRate\n   *      Creates a new NFT, then a Datatoken, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param dtParams input data for Datatoken Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftWithDatatokenWithFixedRate<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    freParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n    const fixedData = this.getFreCreationParams(freParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatokenWithDispenser\n   *      Creates a new NFT, then a Datatoken, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param dtParams input data for Datatoken Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftWithDatatokenWithDispenser<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    dispenserParams: DispenserCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  private getErcCreationParams(dtParams: DatatokenCreateParams): any {\n    let name: string, symbol: string\n    // Generate name & symbol if not present\n    if (!dtParams.name || !dtParams.symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n    return {\n      templateIndex: dtParams.templateIndex,\n      strings: [dtParams.name || name, dtParams.symbol || symbol],\n      addresses: [\n        dtParams.minter,\n        dtParams.paymentCollector,\n        dtParams.mpFeeAddress,\n        dtParams.feeToken\n      ],\n      uints: [Web3.utils.toWei(dtParams.cap), Web3.utils.toWei(dtParams.feeAmount)],\n      bytess: []\n    }\n  }\n\n  private getFreCreationParams(freParams: FreCreationParams): any {\n    if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = freParams.withMint === false ? 0 : 1\n\n    return {\n      fixedPriceAddress: freParams.fixedRateAddress,\n      addresses: [\n        freParams.baseTokenAddress,\n        freParams.owner,\n        freParams.marketFeeCollector,\n        freParams.allowedConsumer\n      ],\n      uints: [\n        freParams.baseTokenDecimals,\n        freParams.datatokenDecimals,\n        Web3.utils.toWei(freParams.fixedRate),\n        Web3.utils.toWei(freParams.marketFee),\n        withMint\n      ]\n    }\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veOceanABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veOCEAN.vy/veOCEAN.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeOcean extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veOceanABI.abi as AbiItem[]\n  }\n\n  /**\n   * Deposit `amount` tokens for `userAddress` and lock until `unlockTime`\n   * @param {String} userAddress user address\n   * @param {String} amount Amount of tokens to be locked\n   * @param {Number} unlockTime Timestamp for unlock\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async lockTokens<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.create_lock,\n      amountFormatted,\n      unlockTime\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.create_lock,\n      amountFormatted,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` tokens for `toAddress` and add to the existing lock\n   * Anyone (even a smart contract) can deposit for someone else, but cannot extend their locktime and deposit for a brand new user\n   * @param {String} fromUserAddress user address that sends the tx\n   * @param {String} toAddress user address to deposit for\n   * @param {String} amount Amount of tokens to be locked\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async depositFor<G extends boolean = false>(\n    fromUserAddress: string,\n    toAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.deposit_for,\n      toAddress,\n      amountFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deposit_for,\n      toAddress,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` additional tokens for `userAddress` without modifying the unlock time\n   * @param {String} userAddress user address that sends the tx\n   * @param {String} amount Amount of tokens to be locked\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseAmount<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.increase_amount,\n      amountFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.increase_amount,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Extend the unlock time for `userAddress` to `unlockTime`\n   * @param {String} userAddress user address that sends the tx\n   * @param {Number} unlockTime Timestamp for new unlock time\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseUnlockTime<G extends boolean = false>(\n    userAddress: string,\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.increase_unlock_time,\n      unlockTime\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.increase_unlock_time,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens for `userAddress`\n   * @param {String} userAddress user address that sends the tx\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async withdraw<G extends boolean = false>(\n    userAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.withdraw\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.withdraw\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get voting power for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getVotingPower(userAddress: string): Promise<number> {\n    const balance = await this.contract.methods.balanceOf(userAddress).call()\n    return balance\n  }\n\n  /** Get locked balance\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async getLockedAmount(userAddress: string): Promise<string> {\n    const balance = await this.contract.methods.locked(userAddress).call()\n    const balanceFormated = await this.unitsToAmount(\n      await this.getToken(),\n      balance.amount\n    )\n\n    return balanceFormated\n  }\n\n  /** Get untilLock for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async lockEnd(userAddress: string): Promise<number> {\n    const untilLock = await this.contract.methods.locked__end(userAddress).call()\n    return untilLock\n  }\n\n  /** Get total supply\n   * @return {Promise<number>}\n   */\n  public async totalSupply(): Promise<string> {\n    const supplyFormated = await this.unitsToAmount(\n      await this.getToken(),\n      await this.contract.methods.totalSupply().call()\n    )\n    return supplyFormated\n  }\n\n  /** Get token\n   * @return {Promise<string>}\n   */\n  public async getToken(): Promise<string> {\n    const tokenAddress = await this.contract.methods.token().call()\n    return tokenAddress\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veFeeABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeDistributor.vy/veFeeDistributor.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeDistributor extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veFeeABI.abi as AbiItem[]\n  }\n\n  /**\n   * Claim fees for `userAddress`\n   * Each call to claim look at a maximum of 50 user veOCEAN points.\n         For accounts with many veOCEAN related actions, this function\n         may need to be called more than once to claim all available\n         fees. In the `Claimed` event that fires, if `claim_epoch` is\n         less than `max_epoch`, the account may claim again\n   * @param {String} userAddress user address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claim<G extends boolean = false>(\n    userAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(userAddress, this.contract.methods.claim)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claim\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Make multiple fee claims in a single call\n    Used to claim for many accounts at once, or to make\n         multiple claims for the same address when that address\n         has significant veOCEAN history\n   * @param {String} fromUserAddress user address that sends the tx\n   * @param {String} addresses array of addresses to claim\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMany<G extends boolean = false>(\n    fromUserAddress: string,\n    addresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claim_many,\n      addresses\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 20000,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claim_many,\n      addresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veFeeEstimate from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeEstimate.vy/veFeeEstimate.json'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { VeOcean } from './VeOcean'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeEstimate extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veFeeEstimate.abi as AbiItem[]\n  }\n\n  /**\n   * estimateClaim\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async estimateClaim(userAddress: string): Promise<string> {\n    const amount = await this.contract.methods.estimateClaim(userAddress).call()\n    const veOcean = new VeOcean(\n      await this.contract.methods.voting_escrow().call(),\n      this.web3\n    )\n    const amountFormated = await this.unitsToAmount(await veOcean.getToken(), amount)\n    return amountFormated\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veAllocateABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veAllocate.sol/veAllocate.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeAllocate extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veAllocateABI.abi as AbiItem[]\n  }\n\n  /**\n   * set a specific percentage of veOcean to a specific nft\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String} userAddress user address\n   * @param {String} amount Percentage used\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setAllocation<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    nft: string,\n    chainId: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.setAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * set specific percetage of veOcean to multiple nfts\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String} userAddress user address\n   * @param {String[]} amount Array of percentages used\n   * @param {String[]} nft Array of NFT addresses\n   * @param {String[]} chainId Array of chainIds\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setBatchAllocation<G extends boolean = false>(\n    userAddress: string,\n    amount: string[],\n    nft: string[],\n    chainId: number[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.setBatchAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setBatchAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get totalAllocation for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getTotalAllocation(userAddress: string): Promise<number> {\n    const allocation = await this.contract.methods.getTotalAllocation(userAddress).call()\n    return allocation\n  }\n\n  /** Get getveAllocation for address, nft, chainId\n   * @param {String} userAddress user address\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<number>}\n   */\n  public async getVeAllocation(\n    userAddress: string,\n    nft: string,\n    chainId: string\n  ): Promise<number> {\n    const allocation = await this.contract.methods\n      .getveAllocation(userAddress, nft, chainId)\n      .call()\n    return allocation\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport dfRewardsABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFRewards.sol/DFRewards.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n\n/**\n * Provides an interface for DFRewards contract\n */\nexport class DfRewards extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return dfRewardsABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for a token\n   * @param {String} userAddress user address\n   * @param {String} tokenAddress token address\n   * @return {Promise<string>}\n   */\n  public async getAvailableRewards(\n    userAddress: string,\n    tokenAddress: string\n  ): Promise<string> {\n    const rewards = await this.contract.methods\n      .claimable(userAddress, tokenAddress)\n      .call()\n    const rewardsFormated = await this.unitsToAmount(tokenAddress, rewards)\n\n    return rewardsFormated\n  }\n\n  /**\n   * claim rewards for any address\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddress token address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddress: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claimFor,\n      userAddress,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claimFor,\n      userAddress,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * allocate rewards to address.  An approve must exist before calling this function.\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String[]} userAddresses array of users that will receive rewards\n   * @param {String[]} amounts array of amounts\n   * @param {String} tokenAddress token address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async allocateRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddresses: string[],\n    amounts: string[],\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    for (let i = 0; i < amounts.length; i++) {\n      amounts[i] = await this.amountToUnits(tokenAddress, amounts[i])\n    }\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.allocate,\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.allocate,\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport dfStrategyV1ABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFStrategyV1.sol/DFStrategyV1.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n\n/**\n * Provides an interface for dfStrategyV1 contract\n */\nexport class DfStrategyV1 extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return dfStrategyV1ABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for multiple tokens\n   * @param {String} userAddress user address\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<string[]>}\n   */\n  public async getMultipleAvailableRewards(\n    userAddress: string,\n    tokenAddresses: string[]\n  ): Promise<string[]> {\n    const rewards = await this.contract.methods\n      .claimables(userAddress, tokenAddresses)\n      .call()\n    const rewardsFormated: string[] = []\n    for (let i = 0; i < rewards.length; i++) {\n      rewardsFormated.push(await this.unitsToAmount(tokenAddresses[i], rewards[i]))\n    }\n    return rewardsFormated\n  }\n\n  /**\n   * claim multiple token rewards for any address\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMultipleRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddress: string,\n    tokenAddresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claimMultiple,\n      userAddress,\n      tokenAddresses\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claimMultiple,\n      userAddress,\n      tokenAddresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import fetch from 'cross-fetch'\nimport { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types'\n\nexport interface SearchQuery {\n  from?: number\n  size?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query: any\n  sort?: { [jsonPath: string]: string }\n  aggs?: any\n}\n\nexport class Aquarius {\n  public aquariusURL: string\n\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param {string} did DID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async getAssetMetadata(did: string, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/metadata/' + did\n\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error(\n          'getAssetMetadata failed: ' + response.status + response.statusText\n        )\n      }\n    } catch (error) {\n      LoggerInstance.error('Error getting metadata: ', error)\n      throw new Error('Error getting metadata: ' + error)\n    }\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param  {SearchQuery} query Query to filter the DDOs.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async querySearch(query: SearchQuery, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/query'\n\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(query),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error('querySearch failed: ' + response.status + response.statusText)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error querying metadata: ', error)\n      throw new Error('Error querying metadata: ' + error)\n    }\n  }\n}\n","import Web3 from 'web3'\nimport fetch from 'cross-fetch'\nimport { LoggerInstance } from '../utils'\nimport {\n  Arweave,\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults,\n  ServiceEndpoint,\n  UrlFile,\n  UserCustomParameters,\n  Ipfs,\n  Smartcontract,\n  GraphqlQuery\n} from '../@types'\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await this.getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {number} chainId network's id so provider can choose the corresponding web3 object\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    chainId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path =\n      (this.getEndpointURL(serviceEndpoints, 'encrypt')\n        ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n        : null) + `?chainId=${chainId}`\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract} file one of the supported file structures\n   * @param {string} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {boolean} withChecksum if true, will return checksum of files content\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: string,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did, serviceId, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract} file one of the supported file structures\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {boolean} withChecksum if true, will return checksum of files content\n   * @param {AbortSignal} signal abort signal\n   * @param {any} headers headers key value pairs associated with the asset GET request\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async getFileInfo(\n    file: UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal,\n    headers?: any\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { ...file, headers, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm,\n      compute: { env: computeEnv, validUntil },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Compute start failed: ',\n        response.status,\n        response.statusText,\n        await response.json()\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${this.noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && (params.providerAddress || params.providerAddresses)) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n\n  private noZeroX(input: string): string {\n    return this.zeroXTransformer(input, false)\n  }\n\n  private zeroXTransformer(input = '', zeroOutput: boolean): string {\n    const { valid, output } = this.inputMatch(\n      input,\n      /^(?:0x)*([a-f0-9]+)$/i,\n      'zeroXTransformer'\n    )\n    return (zeroOutput && valid ? '0x' : '') + output\n  }\n\n  // Shared functions\n  private inputMatch(\n    input: string,\n    regexp: RegExp,\n    conversorName: string\n  ): { valid: boolean; output: string } {\n    if (typeof input !== 'string') {\n      LoggerInstance.debug('Not input string:')\n      LoggerInstance.debug(input)\n      throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n    }\n    const match = input.match(regexp)\n    if (!match) {\n      LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n      return { valid: false, output: input }\n    }\n    return { valid: true, output: match[1] }\n  }\n\n  private async getData(url: string): Promise<Response> {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    })\n  }\n}\n\nexport const ProviderInstance = new Provider()\n"],"names":["Config","nodeUri","providerAddress","metadataCacheUri","providerUri","web3Provider","oceanTokenAddress","nftFactoryAddress","datatokensABI","fixedRateExchangeAddress","fixedRateExchangeAddressABI","dispenserAddress","dispenserABI","opfCommunityFeeCollector","sideStakingAddress","startBlock","verbose","authMessage","authTokenExpiration","parityUri","threshold","chainId","network","subgraphUri","explorerUri","oceanTokenSymbol","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","gasFeeMultiplier","veAllocate","veOCEAN","veDelegation","veFeeDistributor","veDelegationProxy","DFRewards","DFStrategyV1","veFeeEstimate","ZERO_ADDRESS","GASLIMIT_DEFAULT","MAX_UINT_256","FEE_HISTORY_NOT_SUPPORTED","sendTx","from","estGas","web3","functionToSend","sendTxValue","gas","Promise","resolve","eth","getChainId","then","networkId","_temp7","apply","slice","call","_arguments4","send","_temp6","getFeeHistory","feeHistory","_temp5","_feeHistory$baseFeePe","_feeHistory$reward","_feeHistory$reward$","baseFeePerGas","reward","getFairGasPrice","_getFairGasPrice","gasPrice","_feeHistory$reward2","_feeHistory$reward2$","_feeHistory$baseFeePe2","aggressiveFee","BigNumber","multipliedBy","maxPriorityFeePerGas","integerValue","ROUND_DOWN","toString","maxFeePerGas","plus","MUMBAI_NETWORK_ID","POLYGON_NETWORK_ID","lte","MIN_GAS_FEE_POLYGON","_catch","err","message","LoggerInstance","log","_getFairGasPrice2","e","reject","calculateEstimatedGas","functionToEstimateGas","estimateGas","amountToUnits","token","amount","tokenDecimals","decimals","config","EXPONENTIAL_AT","times","exponentiatedBy","toFixed","tokenContract","Contract","minAbi","_temp4","methods","unitsToAmount","amountFormatted","div","_temp2","getGasPrice","_web3$eth$getGasPrice","x","setContractDefaults","contract","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","generateDid","nftAddress","Web3","utils","toChecksumAddress","sha256","getHash","data","LogLevel","downloadFile","url","index","fetch","response","ok","Error","filename","headers","get","match","_unused","split","pop","_unused2","arrayBuffer","_response$arrayBuffer","downloadFileBrowser","method","headResponse","contentHeader","fileName","xhr","XMLHttpRequest","responseType","open","onload","blobURL","window","URL","createObjectURL","a","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","sleep","ms","setTimeout","Logger","logLevel","this","_proto","prototype","setLevel","bypass","dispatch","Infinity","concat","arguments","debug","Verbose","Log","warn","Warn","error","verb","level","_console","console","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","signHash","address","sign","signedMessage","r","substr","s","v","tokenAddress","allowanceWei","account","spender","allowance","balance","balanceOf","trxReceipt","transfer","recipient","approveWei","force","_exit4","result","approve","_sendTx","_temp9","currentAllowence","gt","_Decimal$toNumber4","Decimal","toNumber","_temp8","_exit2","greaterThanOrEqualTo","_Decimal$toNumber2","_temp3","configHelperNetworksBase","configHelperNetworks","_extends","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","_customAddresses$netw","ERC721Factory","OPFCommunityFeeCollector","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","_DefaultContractsAddr","getConfig","infuraProjectId","filterBy","find","_config","SmartContract","abi","getDefaultAbi","_this6$config","getContract","SmartContractWithAddress","_SmartContract","_this","_inheritsLoose","_SmartContractWithAdd","DispenserAbi","status","dtAdress","_this2","maxTokens","fromWei","maxBalance","create","dtAddress","allowedSwapper","_this4","toWei","_this4$config","activate","_this6","deactivate","_this8","_this8$config","setAllowedSwapper","newAllowedSwapper","_this10","_this10$config","dispense","destination","_this12","_this12$config","ownerWithdraw","_this14","_this14$config","isDispensable","datatoken","active","_datatoken$balance","String","greaterThan","isMinter","FixedRateExchange","FixedRateExchangeAbi","generateExchangeId","baseToken","buyDatatokens","exchangeId","datatokenAmount","maxBaseTokenAmount","consumeMarketAddress","consumeMarketFee","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","buyDT","sellDatatokens","minBaseTokenAmount","minBtFormatted","sellDT","getNumberOfExchanges","setRate","newRate","toggleExchangeState","_this16","_this16$config","getRate","_this18","weiRate","getDatatokenSupply","_this20","getDTSupply","dtSupply","getBasetokenSupply","_this22","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenDatatokensOut","_this26","fixedRateExchange","_this25$contract$meth","_calcBaseInGivenOutDT","calcBaseInGivenOutDT","_this25$amountToUnits","outDT","baseTokenAmount","_this25$unitsToAmount","marketFeeAmount","_this25$unitsToAmount2","oceanFeeAmount","_this25$unitsToAmount3","consumeMarketFeeAmount","_this25$unitsToAmount4","getAmountBasetokensOut","_this28","_this27$contract$meth","_calcBaseOutGivenInDT","calcBaseOutGivenInDT","_this27$amountToUnits","_this30","dtBalance","_this29$unitsToAmount","btBalance","_this29$unitsToAmount2","_this29$unitsToAmount3","_this29$unitsToAmount4","fixedRate","getFeesInfo","_this32","feesInfo","opcFee","marketFee","marketFeeAvailable","_this31$unitsToAmount","oceanFeeAvailable","_this31$unitsToAmount2","getExchanges","isActive","activateMint","_this38","withMint","toggleMintState","_this38$config","deactivateMint","_this40","_this40$config","collectBasetokens","_this42","fixedrate","amountWei","collectBT","_this42$config","collectDatatokens","_this44","collectDT","_this44$config","collectMarketFee","_this46","_this46$config","collectOceanFee","_this48","_this48$config","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this53$getExchange","exchangeOwner","updateMarketFee","newMarketFee","_this56","_this56$config","updateMarketFeeCollector","newMarketFeeCollector","_this58","_this58$config","Router","FactoryRouter","buyDatatokenBatch","operations","buyDTBatch","_this2$config","isApprovedToken","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","addApprovedToken","_this11$getOwner","removeApprovedToken","_this13$getOwner","addFixedRateContract","_this15$getOwner","removeFixedRateContract","_this17$getOwner","_this18$config","addDispenserContract","_this19$getOwner","_this20$config","removeDispenserContract","_this21$getOwner","_this22$config","getOPCFee","getCurrentOPCFee","swapOceanFee","updateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","_this27$getOwner","_this28$config","Nft","ERC721Template","createDatatoken","minter","paymentCollector","mpFeeAddress","feeToken","feeAmount","cap","templateIndex","getNftPermissions","_this$getNftPermissio","deployERC20","_generateDtName","nftContract","createERC20","_trxReceipt$events","_trxReceipt$events$To","_trxReceipt$events$To2","events","TokenCreated","returnValues","addManager","manager","getNftOwner","_this3$getNftOwner","removeManager","_this5$getNftOwner","addDatatokenDeployer","datatokenDeployer","_this7$getNftPermissi","addToCreateERC20List","removeDatatokenDeployer","_this9$getNftPermissi","_this9$getNftPermissi2","_temp","removeFromCreateERC20List","addMetadataUpdater","metadataUpdater","_this11$getNftPermiss","addToMetadataList","removeMetadataUpdater","_this13$getNftPermiss","_this13$getNftPermiss2","updateMetadata","removeFromMetadataList","addStoreUpdater","storeUpdater","_this15$getNftPermiss","addTo725StoreList","removeStoreUpdater","_this17$getNftPermiss","_this17$getNftPermiss2","store","removeFrom725StoreList","cleanPermissions","_this19$getNftOwner","transferNft","nftOwner","nftReceiver","tokenId","_this21$getNftOwner","tokenIdentifier","transferFrom","safeTransferNft","_this24","_this23$getNftOwner","safeTransferFrom","_this24$config","setMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","_this25$getNftPermiss","setMetaData","_this26$config","setMetadataAndTokenURI","metadataAndTokenURI","_this27$getNftPermiss","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataState","_this29$getNftPermiss","setMetaDataState","_this30$config","setTokenURI","_this32$config","ownerOf","getPermissions","getMetadata","getMetaData","isDatatokenDeployer","isERC20Deployer","setData","key","value","_this41$getNftPermiss","keyHash","keccak256","valueHex","asciiToHex","setNewData","getData","hexToAscii","getTokenURI","id","tokenURI","Datatoken","abiEnterprise","nft","ERC20TemplateEnterprise","ERC20Template","dtContract","_this3","_this3$config","createFixedRate","fixedRateParams","_this5","_this4$isDatatokenDep","allowedConsumer","fixedRateAddress","baseTokenAddress","owner","marketFeeCollector","baseTokenDecimals","datatokenDecimals","_this5$config","createDispenser","dispenserParams","_this7","_this6$isDatatokenDep","_this7$config","mint","toAddress","_this9","_this8$getPermissions","getCap","capAvailble","gte","_this9$config","addMinter","_this11","_this10$isDatatokenDe","_this11$config","removeMinter","_this13","_this12$isDatatokenDe","_this13$config","addPaymentManager","paymentManager","_this15","_this14$isDatatokenDe","_this15$config","removePaymentManager","_this17","_this16$isDatatokenDe","_this17$config","setPaymentCollector","_this19","_this18$getPermission","_this18$nft$getNftOwn","nftPermissions","isPaymentManager","isNftOwner","_this19$config","getNFTAddress","getPaymentCollector","weiAmount","transferWei","_this25","_this25$config","startOrder","consumer","serviceIndex","providerFees","_this27","consumeMarketFeeAddress","consumeMarketFeeToken","_this27$config","reuseOrder","orderTxId","_this29","_this29$config","buyFromFreAndOrder","orderParams","freParams","_this31","getFreOrderParams","freContractParams","_this31$config","buyFromDispenserAndOrder","dispenserContract","_this33","_this33$config","_this35","_this34$isDatatokenDe","_this35$config","_this36$nft2","_this37","_getNftOwner2","_this36$getNFTAddress","_this36$nft$getNftOwn","_this37$config","permissions","_this41","getDecimals","getSymbol","getName","getERC721Address","datatokenAddress","_this53","setPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","_this55","getPublishingMarketFee","_dtContract$methods$g","_this55$config","publishingMarketFee","_freParams$exchangeId2","_freParams$exchangeCo2","exchangeContract","_this59","_amountToUnits","swapMarketFee","_amountToUnits2","marketFeeAddress","NftFactory","createNFT","nftData","_nftData$templateInde2","getCurrentNFTTemplateCount","_this$getCurrentNFTTe","getNFTTemplate","_this$getNFTTemplate","deployERC721Contract","transferable","_trxReceipt$events$NF","_trxReceipt$events$NF2","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","_this13$getCurrentNFT","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","addNFTTemplate","templateAddress","add721TokenTemplate","disableNFTTemplate","_this23$getOwner","_this23$getCurrentNFT","disable721TokenTemplate","reactivateNFTTemplate","_this25$getOwner","_this25$getCurrentNFT","reactivate721TokenTemplate","addTokenTemplate","disableTokenTemplate","_this29$getOwner","_this29$getCurrentTok","_this29$getTokenTempl","reactivateTokenTemplate","_this31$getOwner","_this31$getCurrentTok","_this31$getTokenTempl","startMultipleTokenOrder","orders","_this34","_this34$config","createNftWithDatatoken","nftCreateData","dtParams","ercCreateData","_this36","getErcCreationParams","createNftWithErc20","_this36$config","createNftWithDatatokenWithFixedRate","fixedData","getFreCreationParams","createNftWithErc20WithFixedRate","createNftWithDatatokenWithDispenser","createNftWithErc20WithDispenser","_generateDtName2","strings","addresses","uints","bytess","fixedPriceAddress","VeOcean","veOceanABI","lockTokens","userAddress","unlockTime","getToken","_this$getToken","create_lock","depositFor","fromUserAddress","_amountToUnits4","_this3$getToken","deposit_for","increaseAmount","_amountToUnits6","_this5$getToken","increase_amount","increaseUnlockTime","increase_unlock_time","withdraw","getVotingPower","getLockedAmount","locked","_unitsToAmount","_this13$getToken","lockEnd","locked__end","totalSupply","_unitsToAmount3","_this17$getToken","_this17$contract$meth","VeFeeDistributor","veFeeABI","claim","claimMany","claim_many","VeFeeEstimate","estimateClaim","voting_escrow","_this$contract$method","veOcean","_veOcean$getToken","VeAllocate","veAllocateABI","setAllocation","setBatchAllocation","getTotalAllocation","getVeAllocation","getveAllocation","_settle","pact","state","bind","DfRewards","dfRewardsABI","getAvailableRewards","claimable","rewards","claimRewards","claimFor","allocateRewards","userAddresses","amounts","allocate","i","_this5$amountToUnits","DfStrategyV1","dfStrategyV1ABI","getMultipleAvailableRewards","tokenAddresses","claimables","rewardsFormated","_push","push","_this$unitsToAmount","claimMultipleRewards","claimMultiple","o","Aquarius","aquariusURL","did","signal","path","json","waitForAqua","txid","tries","_do","_result","ddo","event","_result3","validate","jsonResponse","valid","JSON","stringify","_response$json","hash","proof","validatorAddress","publicKey","errors","getAssetMetadata","statusText","querySearch","query","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","_this3$getServiceEndp","_this3$getEndpoints","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","encrypt","text","checkDidFiles","serviceId","withChecksum","args","checksum","files","results","_step","_iterator","_createForOfIteratorHelperLoose","done","getFileInfo","file","_step2","_iterator2","getComputeEnvironments","_this12$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","output","computeStartUrl","signatureMessage","documentId","payload","Object","environment","_exit","_error","_response$statusText","_response$status","_response$json2","params","computeStop","jobId","computeStopUrl","noZeroX","_temp10","_result2","computeStatus","computeStatusUrl","_exit3","_temp12","_temp11","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","_temp14","_result4","_temp13","isValidProvider","_exit5","_temp15","providerAddresses","_result5","input","zeroXTransformer","zeroOutput","_this$inputMatch","inputMatch","regexp","conversorName","ProviderInstance"],"mappings":"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"}