{"version":3,"file":"lib.module.js","sources":["../src/config/Config.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/DatatokenName.ts","../src/utils/DdoHelpers.ts","../src/utils/FetchHelper.ts","../src/utils/Logger.ts","../src/utils/General.ts","../src/utils/minAbi.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/config/ConfigHelper.ts","../src/contracts/SmartContract.ts","../src/contracts/SmartContractWithAddress.ts","../src/contracts/Dispenser.ts","../src/contracts/FixedRateExchange.ts","../src/contracts/Router.ts","../src/contracts/NFT.ts","../src/contracts/Datatoken.ts","../src/contracts/NFTFactory.ts","../src/contracts/ve/VeOcean.ts","../src/contracts/ve/VeFeeDistributor.ts","../src/contracts/ve/VeFeeEstimate.ts","../src/contracts/ve/VeAllocate.ts","../src/contracts/df/DfRewards.ts","../src/contracts/df/DfStrategyV1.ts","../src/services/Aquarius.ts","../src/services/Provider.ts"],"sourcesContent":["import { AbiItem } from 'web3-utils/types'\nimport { LogLevel } from '../utils'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public nftFactoryAddress?: string\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, goerli, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n\n  veAllocate?: string\n  veOCEAN?: string\n  veDelegation?: string\n  veFeeDistributor?: string\n  veDelegationProxy?: string\n  DFRewards?: string\n  DFStrategyV1?: string\n  veFeeEstimate?: string\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\nexport const MAX_UINT_256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\nexport const FEE_HISTORY_NOT_SUPPORTED =\n  'Returned error: Method eth_feeHistory not supported.'\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { Config } from '../config'\nimport { minAbi, GASLIMIT_DEFAULT, LoggerInstance, FEE_HISTORY_NOT_SUPPORTED } from '.'\nimport { TransactionReceipt } from 'web3-core'\n\nconst MIN_GAS_FEE_POLYGON = 30000000000 // minimum recommended 30 gwei polygon main and mumbai fees\nconst POLYGON_NETWORK_ID = 137\nconst MUMBAI_NETWORK_ID = 80001\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  gasFeeMultiplier: number\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (gasFeeMultiplier)\n    return x\n      .multipliedBy(gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, token)\n  let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n  if (decimals === '0') {\n    decimals = 18\n  }\n\n  const amountFormatted = new BigNumber(amount).div(\n    new BigNumber(10).exponentiatedBy(decimals)\n  )\n\n  BigNumber.config({ EXPONENTIAL_AT: 50 })\n  return amountFormatted.toString()\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, token)\n  let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n  if (decimals === '0') {\n    decimals = 18\n  }\n  BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n  const amountFormatted = new BigNumber(amount).times(\n    new BigNumber(10).exponentiatedBy(decimals)\n  )\n  return amountFormatted.toFixed(0)\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function calculateEstimatedGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<number> {\n  const estimatedGas = await functionToEstimateGas\n    .apply(null, args)\n    .estimateGas({ from }, (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas))\n  return estimatedGas\n}\n\n/**\n * Send the transation on chain\n * @param {string} from account that calls the function\n * @param {any} estGas estimated gas for the transaction\n * @param {Web3} web3 web3 objcet\n * @param {Function} functionToSend function that we need to send\n * @param {...any[]} args arguments of the function\n * @return {Promise<any>} transaction receipt\n */\nexport async function sendTx(\n  from: string,\n  estGas: number,\n  web3: Web3,\n  gasFeeMultiplier: number,\n  functionToSend: Function,\n  ...args: any[]\n): Promise<TransactionReceipt> {\n  const sendTxValue: Record<string, any> = {\n    from,\n    gas: estGas + 1\n  }\n  const networkId = await web3.eth.getChainId()\n  try {\n    const feeHistory = await web3.eth.getFeeHistory(1, 'latest', [75])\n    if (feeHistory && feeHistory?.baseFeePerGas?.[0] && feeHistory?.reward?.[0]?.[0]) {\n      let aggressiveFee = new BigNumber(feeHistory?.reward?.[0]?.[0])\n      if (gasFeeMultiplier > 1) {\n        aggressiveFee = aggressiveFee.multipliedBy(gasFeeMultiplier)\n      }\n\n      sendTxValue.maxPriorityFeePerGas = aggressiveFee\n        .integerValue(BigNumber.ROUND_DOWN)\n        .toString(10)\n\n      sendTxValue.maxFeePerGas = aggressiveFee\n        .plus(new BigNumber(feeHistory?.baseFeePerGas?.[0]).multipliedBy(2))\n        .integerValue(BigNumber.ROUND_DOWN)\n        .toString(10)\n\n      // if network is polygon and mumbai and fees is lower than the 30 gwei trashold, sets MIN_GAS_FEE_POLYGON\n      sendTxValue.maxPriorityFeePerGas =\n        (networkId === MUMBAI_NETWORK_ID || networkId === POLYGON_NETWORK_ID) &&\n        new BigNumber(sendTxValue.maxPriorityFeePerGas).lte(\n          new BigNumber(MIN_GAS_FEE_POLYGON)\n        )\n          ? new BigNumber(MIN_GAS_FEE_POLYGON)\n              .integerValue(BigNumber.ROUND_DOWN)\n              .toString(10)\n          : sendTxValue.maxPriorityFeePerGas\n\n      sendTxValue.maxFeePerGas =\n        (networkId === MUMBAI_NETWORK_ID || networkId === POLYGON_NETWORK_ID) &&\n        new BigNumber(sendTxValue.maxFeePerGas).lte(new BigNumber(MIN_GAS_FEE_POLYGON))\n          ? new BigNumber(MIN_GAS_FEE_POLYGON)\n              .integerValue(BigNumber.ROUND_DOWN)\n              .toString(10)\n          : sendTxValue.maxFeePerGas\n    } else {\n      sendTxValue.gasPrice = await getFairGasPrice(web3, gasFeeMultiplier)\n    }\n  } catch (err) {\n    err?.message === FEE_HISTORY_NOT_SUPPORTED &&\n      LoggerInstance.log(\n        'Not able to use EIP 1559, getFeeHistory method not suported by network.'\n      )\n    sendTxValue.gasPrice = await getFairGasPrice(web3, gasFeeMultiplier)\n  }\n\n  const trxReceipt = await functionToSend.apply(null, args).send(sendTxValue)\n  return trxReceipt\n}\n","import wordListDefault from './data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\n\nexport function generateDid(nftAddress: string, chainId: number): string {\n  nftAddress = Web3.utils.toChecksumAddress(nftAddress)\n  const checksum = sha256(nftAddress + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  return sha256(data).toString()\n}\n","import fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types'\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const headResponse = await fetch(url, { method: 'HEAD' })\n  const contentHeader = headResponse.headers.get('content-disposition')\n  const fileName = contentHeader?.split('=')[1] ? contentHeader?.split('=')[1] : 'file'\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'blob'\n  xhr.open('GET', url)\n  xhr.onload = () => {\n    const blobURL = window.URL.createObjectURL(xhr.response)\n    const a = document.createElement('a')\n    a.href = blobURL\n    a.setAttribute('download', fileName)\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    window.URL.revokeObjectURL(blobURL)\n  }\n  xhr.send(null)\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n","/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","import Web3 from 'web3'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport {\n  amountToUnits,\n  calculateEstimatedGas,\n  unitsToAmount,\n  minAbi,\n  sendTx,\n  LoggerInstance\n} from '.'\nimport { Config } from '../config'\nimport { ReceiptOrEstimate } from '../@types'\n\n/**\n * Approve spender to spent amount tokens\n * @param {Web3} web3\n * @param {Config} config\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 Datatokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {boolean} estimateGas  if true, returns the estimate gas cost for calling the method\n */\nexport async function approve<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return <ReceiptOrEstimate<G>>new Decimal(currentAllowence).toNumber()\n    }\n  }\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  const trxReceipt = await sendTx(\n    account,\n    estGas + 1,\n    web3,\n    config?.gasFeeMultiplier,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n  return <ReceiptOrEstimate<G>>trxReceipt\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {Web3} web3\n * @param {Config} config\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {boolean} estimateGas  if true, returns the estimate gas cost for calling the method\n */\nexport async function approveWei<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return <ReceiptOrEstimate<G>>new Decimal(currentAllowence).toNumber()\n    }\n  }\n  let result = null\n\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  try {\n    result = await sendTx(\n      account,\n      estGas + 1,\n      web3,\n      config?.gasFeeMultiplier,\n      tokenContract.methods.approve,\n      spender,\n      amount\n    )\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 Datatokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  const trxReceipt = await sendTx(\n    account,\n    estGas + 1,\n    web3,\n    config?.gasFeeMultiplier,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n  return <ReceiptOrEstimate<G>>trxReceipt\n}\n\n/**\n * Get Allowance for any Datatoken\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any Datatoken\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get decimals for any Datatoken\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport { Config } from '.'\nimport { LoggerInstance } from '../utils'\n// eslint-disable-next-line import/no-named-default\nimport { default as CustomContractAddressess } from '../../address.json'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'https://v4.provider.oceanprotocol.com',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://172.15.0.5:5000', // use http://127.0.0.1:5000/ if running on macOS\n    providerUri: 'http://172.15.0.4:8030', // use http://127.0.0.1:8030/ if running on macOS\n    subgraphUri: 'https://172.15.0.15:8000' // use http://127.0.0.1:9000/ if running on macOS\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 5,\n    network: 'goerli',\n    nodeUri: 'https://goerli.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://goerli.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN',\n    gasFeeMultiplier: 1.6\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 81001,\n    network: 'polygonedge',\n    nodeUri: 'https://rpc-edgenet.polygon.technology',\n    providerUri: 'https://v4.provider.goerli.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://explorer-edgenet.polygon.technology/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      const {\n        FixedPrice,\n        Dispenser,\n        ERC721Factory,\n        OPFCommunityFeeCollector,\n        Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate\n      } = customAddresses[network]\n      configAddresses = {\n        nftFactoryAddress: ERC721Factory,\n        opfCommunityFeeCollector: OPFCommunityFeeCollector,\n        fixedRateExchangeAddress: FixedPrice,\n        dispenserAddress: Dispenser,\n        oceanTokenAddress: Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate,\n        ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          nftFactoryAddress: ERC721Factory,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(\n        `No config found for given network '${network}' filter by '${filterBy}'`\n      )\n      return null\n    }\n\n    LoggerInstance.debug(\n      `getConfig getAddressesFromEnv after filter by '${filterBy}' to network'${config?.network}'`\n    )\n    const contractAddressesConfig = this.getAddressesFromEnv(\n      config.network,\n      CustomContractAddressess\n    )\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Web3 from 'web3'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport { Config, ConfigHelper } from '../config'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from '../utils'\n\nexport abstract class SmartContract {\n  public web3: Web3\n  public config: Config\n  public abi: AbiItem | AbiItem[]\n\n  abstract getDefaultAbi(): AbiItem | AbiItem[]\n\n  /**\n   * Instantiate the smart contract.\n   * @param {Web3} web3\n   * @param {string | number} network Network id or name\n   * @param {Config} config Configutation of the smart contract\n   * @param {AbiItem | AbiItem[]} abi ABI of the smart contract\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[]\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.abi = abi || (this.getDefaultAbi() as AbiItem[])\n  }\n\n  protected async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  protected async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  protected async getFairGasPrice(): Promise<string> {\n    return getFairGasPrice(this.web3, this.config?.gasFeeMultiplier)\n  }\n\n  protected getContract(\n    address: string,\n    account?: string,\n    abi?: AbiItem | AbiItem[]\n  ): Contract {\n    const contract = new this.web3.eth.Contract(abi || this.abi, address, {\n      from: account\n    })\n    return setContractDefaults(contract, this.config)\n  }\n}\n","import Web3 from 'web3'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\n\nexport abstract class SmartContractWithAddress extends SmartContract {\n  public address: string\n  public contract: Contract\n\n  /**\n   * Instantiate the smart contract.\n   * @param {string} address Address of the smart contract\n   * @param {Web3} web3\n   * @param {string | number} network Network id or name\n   * @param {Config} config Configutation of the smart contract\n   * @param {AbiItem | AbiItem[]} abi ABI of the smart contract\n   */\n  constructor(\n    address: string,\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[]\n  ) {\n    super(web3, network, config, abi)\n    this.address = address\n    this.contract = this.getContract(this.address)\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport Decimal from 'decimal.js'\nimport DispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport { calculateEstimatedGas, sendTx } from '../utils'\nimport { Datatoken } from './Datatoken'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\nimport { DispenserToken, ReceiptOrEstimate } from '../@types'\n\nexport class Dispenser extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return DispenserAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    const status: DispenserToken = await this.contract.methods.status(dtAdress).call()\n    if (!status) {\n      throw new Error(`Np dispenser found for the given datatoken address`)\n    }\n    status.maxTokens = this.web3.utils.fromWei(status.maxTokens)\n    status.maxBalance = this.web3.utils.fromWei(status.maxBalance)\n    status.balance = this.web3.utils.fromWei(status.balance)\n    return status\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async create<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Call createFixedRate contract method\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async activate<G extends boolean = false>(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async deactivate<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.deactivate,\n      dtAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deactivate,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async dispense<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async ownerWithdraw<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.ownerWithdraw,\n      dtAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import FixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { AbiItem } from 'web3-utils/types'\nimport { calculateEstimatedGas, sendTx, ZERO_ADDRESS } from '../utils'\nimport { PriceAndFees, FeesInfo, FixedPriceExchange, ReceiptOrEstimate } from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\nexport class FixedRateExchange extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return FixedRateExchangeAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async buyDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sell datatokenAmount while expecting at least minBaseTokenAmount\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async sellDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setRate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newRate: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowedSwapper\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDatatokenSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBasetokenSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenDatatokensOut - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenDatatokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const outDT = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBasetokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const amount = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, amount[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const exchange: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    exchange.dtDecimals = exchange.dtDecimals.toString()\n    exchange.btDecimals = exchange.btDecimals.toString()\n    exchange.dtBalance = await this.unitsToAmount(\n      exchange.datatoken,\n      exchange.dtBalance,\n      +exchange.dtDecimals\n    )\n    exchange.btBalance = await this.unitsToAmount(\n      exchange.baseToken,\n      exchange.btBalance,\n      +exchange.btDecimals\n    )\n    exchange.dtSupply = await this.unitsToAmount(\n      exchange.datatoken,\n      exchange.dtSupply,\n      +exchange.dtDecimals\n    )\n    exchange.btSupply = await this.unitsToAmount(\n      exchange.baseToken,\n      exchange.btSupply,\n      +exchange.btDecimals\n    )\n    exchange.fixedRate = this.web3.utils.fromWei(exchange.fixedRate)\n    exchange.exchangeId = exchangeId\n    return exchange\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const feesInfo: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    feesInfo.opcFee = this.web3.utils.fromWei(feesInfo.opcFee.toString())\n    feesInfo.marketFee = this.web3.utils.fromWei(feesInfo.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    feesInfo.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      feesInfo.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    feesInfo.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      feesInfo.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    feesInfo.exchangeId = exchangeId\n    return feesInfo\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const active = await this.contract.methods.isActive(exchangeId).call()\n    return active\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activateMint<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivateMint<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectBasetokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectMarketFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectMarketFee,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectMarketFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectOceanFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectOceanFee,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectOceanFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    const address = await this.contract.methods.opcCollector().call()\n    return address\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  public async getRouter(): Promise<string> {\n    const address = await this.contract.methods.router().call()\n    return address\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    const address = await (await this.getExchange(exchangeId)).exchangeOwner\n    return address\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFeeCollector<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport FactoryRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { calculateEstimatedGas, sendTx } from '../utils'\nimport { Operation, ReceiptOrEstimate } from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return FactoryRouter.abi as AbiItem[]\n  }\n\n  /**\n   * buyDatatokenBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<ReceiptOrEstimate>} Transaction receipt\n   */\n  public async buyDatatokenBatch<G extends boolean = false>(\n    address: string,\n    operations: Operation[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.buyDTBatch,\n      operations\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.buyDTBatch,\n      operations\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.contract.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.contract.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.contract.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.contract.methods.factory().call()\n  }\n\n  /**\n   * Adds a token to the list of tokens with reduced fees\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addApprovedToken,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a token if exists from the list of tokens with reduced fees\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeApprovedToken,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeApprovedToken,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of fixed rate contracts\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addFixedRateContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of fixed rate contracts\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeFixedRateContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of dispensers\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addDispenserContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of dispensers\n   * @param {String} address\n   * @param {String} tokenAddress address Contract to be removed\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeDispenserContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.contract.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.contract.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Updates OP Community Fees\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async updateOPCFee<G extends boolean = false>(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport ERC721Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport { generateDtName, calculateEstimatedGas, sendTx } from '../utils'\nimport {\n  MetadataProof,\n  MetadataAndTokenURI,\n  NftRoles,\n  ReceiptOrEstimate\n} from '../@types'\nimport { SmartContract } from './SmartContract'\n\nexport class Nft extends SmartContract {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC721Template.abi as AbiItem[]\n  }\n\n  /**\n   * Create new ERC20 Datatoken - only user with DatatokenDeployer permission can succeed\n   * @param {String} nftAddress NFT address\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the Datatoken\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 Datatoken address\n   */\n  public async createDatatoken<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    estimateGas?: G\n  ): Promise<G extends false ? string : number> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n    if (estimateGas) return <G extends false ? string : number>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    return trxReceipt?.events?.TokenCreated?.returnValues?.[0]\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addManager,\n      manager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeManager,\n      manager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer User adress which is going to have DatatokenDeployer permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      datatokenDeployer\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addToCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer Address of the user to be revoked DatatokenDeployer Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === datatokenDeployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor DatatokenDeployer`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      datatokenDeployer\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFromCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to remove all ROLES at NFT level: Managers, DatatokenDeployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at Datatoken level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.cleanPermissions\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async transferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await calculateEstimatedGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      nftOwner,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async safeTransferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await calculateEstimatedGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      nftOwner,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates or update Metadata cached by Aquarius. Also, updates the METADATA_DECRYPTOR key\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadata<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataAndTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await calculateEstimatedGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      metadataUpdater,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataState<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress NFT contract address\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    data: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setTokenURI,\n      '1',\n      data\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setTokenURI,\n      '1',\n      data\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<NftRoles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<NftRoles> {\n    const nftContract = this.getContract(nftAddress)\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = this.getContract(nftAddress)\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users DatatokenDeployer role\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(\n    nftAddress: string,\n    address: string\n  ): Promise<boolean> {\n    const nftContract = this.getContract(nftAddress)\n    const isDatatokenDeployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isDatatokenDeployer\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param key Key of the data to be stored into 725Y standard\n   * @param value Data to be stored into 725Y standard\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData(\n    nftAddress: string,\n    address: string,\n    key: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getNftPermissions(nftAddress, address)).store !== true) {\n      throw new Error(`User is not ERC20 store updater`)\n    }\n\n    const nftContract = this.getContract(nftAddress)\n\n    const keyHash = this.web3.utils.keccak256(key)\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    return trxReceipt\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress NFT contract address\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const keyHash = this.web3.utils.keccak256(key)\n    const data = await nftContract.methods.getData(keyHash).call()\n    return data ? this.web3.utils.hexToAscii(data) : null\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress NFT contract address\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport ERC20Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport ERC20TemplateEnterprise from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport { amountToUnits, sendTx, calculateEstimatedGas, ZERO_ADDRESS } from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee,\n  DispenserParams,\n  OrderParams,\n  DatatokenRoles,\n  ReceiptOrEstimate\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\n\nexport class Datatoken extends SmartContract {\n  public abiEnterprise: AbiItem | AbiItem[]\n  public nft: Nft\n\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC20Template.abi as AbiItem[]\n  }\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[],\n    abiEnterprise?: AbiItem | AbiItem[]\n  ) {\n    super(web3, network, config, abi)\n    this.abiEnterprise = abiEnterprise || (ERC20TemplateEnterprise.abi as AbiItem[])\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async approve<G extends boolean = false>(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async createFixedRate<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint === false ? 0 : 1\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async createDispenser<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    dispenserParams.withMint = dispenserParams.withMint !== false\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async mint<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.getPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await calculateEstimatedGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n      if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n      const trxReceipt = await sendTx(\n        address,\n        estGas + 1,\n        this.web3,\n        this.config?.gasFeeMultiplier,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n      return <ReceiptOrEstimate<G>>trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Add Minter for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.addMinter,\n      minter\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.addMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.removeMinter,\n      minter\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.removeMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addPaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removePaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setPaymentCollector<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    const isPaymentManager = (await this.getPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isDatatokenDeployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isDatatokenDeployer) {\n      throw new Error(`Caller is not Fee Manager, owner or Datatoken Deployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transferWei<G extends boolean = false>(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.transfer,\n      toAddress,\n      amount\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.transfer,\n      toAddress,\n      amount\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async startOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async reuseOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.reuseOrder,\n      orderTxId,\n      providerFees\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.reuseOrder,\n      orderTxId,\n      providerFees\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromFreAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, null, this.abiEnterprise)\n\n    const freContractParams = await this.getFreOrderParams(freParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freContractParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freContractParams\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromDispenserAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, null, this.abiEnterprise)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(dtAddress)) into NFT 725 Store\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    value: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setData,\n      valueHex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setData,\n      valueHex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Clean Datatoken level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 Datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.cleanPermissions\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Returns ERC20 Datatoken user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<DatatokenRoles>}\n   */\n  public async getPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<DatatokenRoles> {\n    const dtContract = this.getContract(dtAddress)\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token symbol\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getSymbol(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const symbol = await dtContract.methods.symbol().call()\n    return symbol\n  }\n\n  /** It returns the name of the token\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getName(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const name = await dtContract.methods.name().call()\n    return name\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = this.getContract(dtAddress)\n    const isDatatokenDeployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isDatatokenDeployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = this.getContract(datatokenAddress, address)\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee<G extends boolean = false>(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(datatokenAddress, address)\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = this.getContract(datatokenAddress, address)\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n\n  private async getFreOrderParams(freParams: FreOrderParams): Promise<any> {\n    return {\n      exchangeContract: freParams.exchangeContract,\n      exchangeId: freParams.exchangeId,\n      maxBaseTokenAmount: await amountToUnits(\n        this.web3,\n        freParams.baseTokenAddress,\n        freParams.maxBaseTokenAmount,\n        freParams.baseTokenDecimals\n      ),\n      swapMarketFee: await amountToUnits(\n        this.web3,\n        freParams.baseTokenAddress,\n        freParams.swapMarketFee,\n        freParams.baseTokenDecimals\n      ),\n\n      marketFeeAddress: freParams.marketFeeAddress\n    }\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport ERC721Factory from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport { generateDtName, calculateEstimatedGas, ZERO_ADDRESS, sendTx } from '../utils'\nimport {\n  FreCreationParams,\n  DatatokenCreateParams,\n  DispenserCreationParams,\n  NftCreateData,\n  Template,\n  TokenOrder,\n  ReceiptOrEstimate\n} from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC721Factory.abi as AbiItem[]\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT<G extends boolean = false>(\n    address: string,\n    nftData: NftCreateData,\n    estimateGas?: G\n  ): Promise<G extends false ? string : number> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    if (estimateGas) return <G extends false ? string : number>estGas\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    return trxReceipt?.events?.NFTCreated?.returnValues?.[0]\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const nftCount = await this.contract.methods.getCurrentNFTCount().call()\n    return nftCount\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const tokenCount = await this.contract.methods.getCurrentTokenCount().call()\n    return tokenCount\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const owner = await this.contract.methods.owner().call()\n    return owner\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.contract.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of Datatoken Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.contract.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.contract.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken (ERC20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.contract.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if Datatoken is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.contract.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.contract.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.add721TokenTemplate,\n      templateAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.add721TokenTemplate,\n      templateAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.disable721TokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addTokenTemplate,\n      templateAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.disableTokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ Datatoken contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - ERC20 Datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async startMultipleTokenOrder<G extends boolean = false>(\n    address: string,\n    orders: TokenOrder[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.startMultipleTokenOrder,\n      orders\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatoken\n   *      Creates a new NFT, then a Datatoken,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for Datatoken creation\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n\n  public async createNftWithDatatoken<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatokenWithFixedRate\n   *      Creates a new NFT, then a Datatoken, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param dtParams input data for Datatoken Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftWithDatatokenWithFixedRate<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    freParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n    const fixedData = this.getFreCreationParams(freParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatokenWithDispenser\n   *      Creates a new NFT, then a Datatoken, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param dtParams input data for Datatoken Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftWithDatatokenWithDispenser<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    dispenserParams: DispenserCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  private getErcCreationParams(dtParams: DatatokenCreateParams): any {\n    let name: string, symbol: string\n    // Generate name & symbol if not present\n    if (!dtParams.name || !dtParams.symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n    return {\n      templateIndex: dtParams.templateIndex,\n      strings: [dtParams.name || name, dtParams.symbol || symbol],\n      addresses: [\n        dtParams.minter,\n        dtParams.paymentCollector,\n        dtParams.mpFeeAddress,\n        dtParams.feeToken\n      ],\n      uints: [Web3.utils.toWei(dtParams.cap), Web3.utils.toWei(dtParams.feeAmount)],\n      bytess: []\n    }\n  }\n\n  private getFreCreationParams(freParams: FreCreationParams): any {\n    if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = freParams.withMint === false ? 0 : 1\n\n    return {\n      fixedPriceAddress: freParams.fixedRateAddress,\n      addresses: [\n        freParams.baseTokenAddress,\n        freParams.owner,\n        freParams.marketFeeCollector,\n        freParams.allowedConsumer\n      ],\n      uints: [\n        freParams.baseTokenDecimals,\n        freParams.datatokenDecimals,\n        Web3.utils.toWei(freParams.fixedRate),\n        Web3.utils.toWei(freParams.marketFee),\n        withMint\n      ]\n    }\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veOceanABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veOCEAN.vy/veOCEAN.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeOcean extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veOceanABI.abi as AbiItem[]\n  }\n\n  /**\n   * Deposit `amount` tokens for `userAddress` and lock until `unlockTime`\n   * @param {String} userAddress user address\n   * @param {String} amount Amount of tokens to be locked\n   * @param {Number} unlockTime Timestamp for unlock\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async lockTokens<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.create_lock,\n      amountFormatted,\n      unlockTime\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.create_lock,\n      amountFormatted,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` tokens for `toAddress` and add to the existing lock\n   * Anyone (even a smart contract) can deposit for someone else, but cannot extend their locktime and deposit for a brand new user\n   * @param {String} fromUserAddress user address that sends the tx\n   * @param {String} toAddress user address to deposit for\n   * @param {String} amount Amount of tokens to be locked\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async depositFor<G extends boolean = false>(\n    fromUserAddress: string,\n    toAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.deposit_for,\n      toAddress,\n      amountFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deposit_for,\n      toAddress,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` additional tokens for `userAddress` without modifying the unlock time\n   * @param {String} userAddress user address that sends the tx\n   * @param {String} amount Amount of tokens to be locked\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseAmount<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.increase_amount,\n      amountFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.increase_amount,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Extend the unlock time for `userAddress` to `unlockTime`\n   * @param {String} userAddress user address that sends the tx\n   * @param {Number} unlockTime Timestamp for new unlock time\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseUnlockTime<G extends boolean = false>(\n    userAddress: string,\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.increase_unlock_time,\n      unlockTime\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.increase_unlock_time,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens for `userAddress`\n   * @param {String} userAddress user address that sends the tx\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async withdraw<G extends boolean = false>(\n    userAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.withdraw\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.withdraw\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get voting power for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getVotingPower(userAddress: string): Promise<number> {\n    const balance = await this.contract.methods.balanceOf(userAddress).call()\n    return balance\n  }\n\n  /** Get locked balance\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async getLockedAmount(userAddress: string): Promise<string> {\n    const balance = await this.contract.methods.locked(userAddress).call()\n    const balanceFormated = await this.unitsToAmount(\n      await this.getToken(),\n      balance.amount\n    )\n\n    return balanceFormated\n  }\n\n  /** Get untilLock for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async lockEnd(userAddress: string): Promise<number> {\n    const untilLock = await this.contract.methods.locked__end(userAddress).call()\n    return untilLock\n  }\n\n  /** Get total supply\n   * @return {Promise<number>}\n   */\n  public async totalSupply(): Promise<string> {\n    const supplyFormated = await this.unitsToAmount(\n      await this.getToken(),\n      await this.contract.methods.totalSupply().call()\n    )\n    return supplyFormated\n  }\n\n  /** Get token\n   * @return {Promise<string>}\n   */\n  public async getToken(): Promise<string> {\n    const tokenAddress = await this.contract.methods.token().call()\n    return tokenAddress\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veFeeABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeDistributor.vy/veFeeDistributor.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeDistributor extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veFeeABI.abi as AbiItem[]\n  }\n\n  /**\n   * Claim fees for `userAddress`\n   * Each call to claim look at a maximum of 50 user veOCEAN points.\n         For accounts with many veOCEAN related actions, this function\n         may need to be called more than once to claim all available\n         fees. In the `Claimed` event that fires, if `claim_epoch` is\n         less than `max_epoch`, the account may claim again\n   * @param {String} userAddress user address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claim<G extends boolean = false>(\n    userAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(userAddress, this.contract.methods.claim)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claim\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Make multiple fee claims in a single call\n    Used to claim for many accounts at once, or to make\n         multiple claims for the same address when that address\n         has significant veOCEAN history\n   * @param {String} fromUserAddress user address that sends the tx\n   * @param {String} addresses array of addresses to claim\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMany<G extends boolean = false>(\n    fromUserAddress: string,\n    addresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claim_many,\n      addresses\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 20000,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claim_many,\n      addresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veFeeEstimate from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeEstimate.vy/veFeeEstimate.json'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { VeOcean } from './VeOcean'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeEstimate extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veFeeEstimate.abi as AbiItem[]\n  }\n\n  /**\n   * estimateClaim\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async estimateClaim(userAddress: string): Promise<string> {\n    const amount = await this.contract.methods.estimateClaim(userAddress).call()\n    const veOcean = new VeOcean(\n      await this.contract.methods.voting_escrow().call(),\n      this.web3\n    )\n    const amountFormated = await this.unitsToAmount(await veOcean.getToken(), amount)\n    return amountFormated\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veAllocateABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veAllocate.sol/veAllocate.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeAllocate extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veAllocateABI.abi as AbiItem[]\n  }\n\n  /**\n   * set a specific percentage of veOcean to a specific nft\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String} userAddress user address\n   * @param {String} amount Percentage used\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setAllocation<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    nft: string,\n    chainId: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.setAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * set specific percetage of veOcean to multiple nfts\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String} userAddress user address\n   * @param {String[]} amount Array of percentages used\n   * @param {String[]} nft Array of NFT addresses\n   * @param {String[]} chainId Array of chainIds\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setBatchAllocation<G extends boolean = false>(\n    userAddress: string,\n    amount: string[],\n    nft: string[],\n    chainId: number[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.setBatchAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setBatchAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get totalAllocation for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getTotalAllocation(userAddress: string): Promise<number> {\n    const allocation = await this.contract.methods.getTotalAllocation(userAddress).call()\n    return allocation\n  }\n\n  /** Get getveAllocation for address, nft, chainId\n   * @param {String} userAddress user address\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<number>}\n   */\n  public async getVeAllocation(\n    userAddress: string,\n    nft: string,\n    chainId: string\n  ): Promise<number> {\n    const allocation = await this.contract.methods\n      .getveAllocation(userAddress, nft, chainId)\n      .call()\n    return allocation\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport dfRewardsABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFRewards.sol/DFRewards.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n\n/**\n * Provides an interface for DFRewards contract\n */\nexport class DfRewards extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return dfRewardsABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for a token\n   * @param {String} userAddress user address\n   * @param {String} tokenAddress token address\n   * @return {Promise<string>}\n   */\n  public async getAvailableRewards(\n    userAddress: string,\n    tokenAddress: string\n  ): Promise<string> {\n    const rewards = await this.contract.methods\n      .claimable(userAddress, tokenAddress)\n      .call()\n    const rewardsFormated = await this.unitsToAmount(tokenAddress, rewards)\n\n    return rewardsFormated\n  }\n\n  /**\n   * claim rewards for any address\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddress token address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddress: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claimFor,\n      userAddress,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claimFor,\n      userAddress,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * allocate rewards to address.  An approve must exist before calling this function.\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String[]} userAddresses array of users that will receive rewards\n   * @param {String[]} amounts array of amounts\n   * @param {String} tokenAddress token address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async allocateRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddresses: string[],\n    amounts: string[],\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    for (let i = 0; i < amounts.length; i++) {\n      amounts[i] = await this.amountToUnits(tokenAddress, amounts[i])\n    }\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.allocate,\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.allocate,\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport dfStrategyV1ABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFStrategyV1.sol/DFStrategyV1.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n\n/**\n * Provides an interface for dfStrategyV1 contract\n */\nexport class DfStrategyV1 extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return dfStrategyV1ABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for multiple tokens\n   * @param {String} userAddress user address\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<string[]>}\n   */\n  public async getMultipleAvailableRewards(\n    userAddress: string,\n    tokenAddresses: string[]\n  ): Promise<string[]> {\n    const rewards = await this.contract.methods\n      .claimables(userAddress, tokenAddresses)\n      .call()\n    const rewardsFormated: string[] = []\n    for (let i = 0; i < rewards.length; i++) {\n      rewardsFormated.push(await this.unitsToAmount(tokenAddresses[i], rewards[i]))\n    }\n    return rewardsFormated\n  }\n\n  /**\n   * claim multiple token rewards for any address\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMultipleRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddress: string,\n    tokenAddresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claimMultiple,\n      userAddress,\n      tokenAddresses\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claimMultiple,\n      userAddress,\n      tokenAddresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import fetch from 'cross-fetch'\nimport { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types'\n\nexport interface SearchQuery {\n  from?: number\n  size?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query: any\n  sort?: { [jsonPath: string]: string }\n  aggs?: any\n}\n\nexport class Aquarius {\n  public aquariusURL: string\n\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param {string} did DID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async getAssetMetadata(did: string, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/metadata/' + did\n\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error(\n          'getAssetMetadata failed: ' + response.status + response.statusText\n        )\n      }\n    } catch (error) {\n      LoggerInstance.error('Error getting metadata: ', error)\n      throw new Error('Error getting metadata: ' + error)\n    }\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param  {SearchQuery} query Query to filter the DDOs.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async querySearch(query: SearchQuery, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/query'\n\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(query),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error('querySearch failed: ' + response.status + response.statusText)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error querying metadata: ', error)\n      throw new Error('Error querying metadata: ' + error)\n    }\n  }\n}\n","import Web3 from 'web3'\nimport fetch from 'cross-fetch'\nimport { LoggerInstance } from '../utils'\nimport {\n  Arweave,\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults,\n  ServiceEndpoint,\n  UrlFile,\n  UserCustomParameters,\n  Ipfs,\n  Smartcontract,\n  GraphqlQuery\n} from '../@types'\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await this.getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {number} chainId network's id so provider can choose the corresponding web3 object\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    chainId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path =\n      (this.getEndpointURL(serviceEndpoints, 'encrypt')\n        ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n        : null) + `?chainId=${chainId}`\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract} file one of the supported file structures\n   * @param {string} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {boolean} withChecksum if true, will return checksum of files content\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: string,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did, serviceId, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract} file one of the supported file structures\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {boolean} withChecksum if true, will return checksum of files content\n   * @param {AbortSignal} signal abort signal\n   * @param {any} headers headers key value pairs associated with the asset GET request\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async getFileInfo(\n    file: UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal,\n    headers?: any\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { ...file, headers, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm,\n      compute: { env: computeEnv, validUntil },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Compute start failed: ',\n        response.status,\n        response.statusText,\n        await response.json()\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${this.noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && (params.providerAddress || params.providerAddresses)) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n\n  private noZeroX(input: string): string {\n    return this.zeroXTransformer(input, false)\n  }\n\n  private zeroXTransformer(input = '', zeroOutput: boolean): string {\n    const { valid, output } = this.inputMatch(\n      input,\n      /^(?:0x)*([a-f0-9]+)$/i,\n      'zeroXTransformer'\n    )\n    return (zeroOutput && valid ? '0x' : '') + output\n  }\n\n  // Shared functions\n  private inputMatch(\n    input: string,\n    regexp: RegExp,\n    conversorName: string\n  ): { valid: boolean; output: string } {\n    if (typeof input !== 'string') {\n      LoggerInstance.debug('Not input string:')\n      LoggerInstance.debug(input)\n      throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n    }\n    const match = input.match(regexp)\n    if (!match) {\n      LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n      return { valid: false, output: input }\n    }\n    return { valid: true, output: match[1] }\n  }\n\n  private async getData(url: string): Promise<Response> {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    })\n  }\n}\n\nexport const ProviderInstance = new Provider()\n"],"names":["Config","nodeUri","providerAddress","metadataCacheUri","providerUri","web3Provider","oceanTokenAddress","nftFactoryAddress","datatokensABI","fixedRateExchangeAddress","fixedRateExchangeAddressABI","dispenserAddress","dispenserABI","opfCommunityFeeCollector","sideStakingAddress","startBlock","verbose","authMessage","authTokenExpiration","parityUri","threshold","chainId","network","subgraphUri","explorerUri","oceanTokenSymbol","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","gasFeeMultiplier","veAllocate","veOCEAN","veDelegation","veFeeDistributor","veDelegationProxy","DFRewards","DFStrategyV1","veFeeEstimate","ZERO_ADDRESS","GASLIMIT_DEFAULT","MAX_UINT_256","FEE_HISTORY_NOT_SUPPORTED","sendTx","from","estGas","web3","functionToSend","sendTxValue","gas","Promise","resolve","eth","getChainId","then","networkId","_temp7","apply","slice","call","_arguments4","send","_temp6","getFeeHistory","feeHistory","_temp5","_feeHistory$baseFeePe","_feeHistory$reward","_feeHistory$reward$","baseFeePerGas","reward","getFairGasPrice","_getFairGasPrice","gasPrice","_feeHistory$reward2","_feeHistory$reward2$","_feeHistory$baseFeePe2","aggressiveFee","BigNumber","multipliedBy","maxPriorityFeePerGas","integerValue","ROUND_DOWN","toString","maxFeePerGas","plus","MUMBAI_NETWORK_ID","POLYGON_NETWORK_ID","lte","MIN_GAS_FEE_POLYGON","_catch","err","message","LoggerInstance","log","_getFairGasPrice2","e","reject","calculateEstimatedGas","functionToEstimateGas","estimateGas","amountToUnits","token","amount","tokenDecimals","decimals","config","EXPONENTIAL_AT","times","exponentiatedBy","toFixed","tokenContract","Contract","minAbi","_temp4","methods","unitsToAmount","amountFormatted","div","_temp2","getGasPrice","_web3$eth$getGasPrice","x","setContractDefaults","contract","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","generateDid","nftAddress","Web3","utils","toChecksumAddress","sha256","getHash","data","LogLevel","downloadFile","url","index","fetch","response","ok","Error","filename","headers","get","match","_unused","split","pop","_unused2","arrayBuffer","_response$arrayBuffer","downloadFileBrowser","method","headResponse","contentHeader","fileName","xhr","XMLHttpRequest","responseType","open","onload","blobURL","window","URL","createObjectURL","a","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","sleep","ms","setTimeout","Logger","logLevel","this","_proto","prototype","setLevel","bypass","dispatch","Infinity","concat","arguments","debug","Verbose","Log","warn","Warn","error","verb","level","_console","console","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","signHash","address","sign","signedMessage","r","substr","s","v","tokenAddress","allowanceWei","account","spender","allowance","balance","balanceOf","trxReceipt","transfer","recipient","approveWei","force","_exit4","result","approve","_sendTx","_temp9","currentAllowence","gt","_Decimal$toNumber4","Decimal","toNumber","_temp8","_exit2","greaterThanOrEqualTo","_Decimal$toNumber2","_temp3","configHelperNetworksBase","configHelperNetworks","_extends","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","_customAddresses$netw","ERC721Factory","OPFCommunityFeeCollector","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","_DefaultContractsAddr","getConfig","infuraProjectId","filterBy","find","_config","CustomContractAddressess","SmartContract","abi","getDefaultAbi","_this6$config","getContract","SmartContractWithAddress","_SmartContract","_this","_inheritsLoose","_SmartContractWithAdd","DispenserAbi","status","dtAdress","_this2","maxTokens","fromWei","maxBalance","create","dtAddress","allowedSwapper","_this4","toWei","_this4$config","activate","_this6","deactivate","_this8","_this8$config","setAllowedSwapper","newAllowedSwapper","_this10","_this10$config","dispense","destination","_this12","_this12$config","ownerWithdraw","_this14","_this14$config","isDispensable","datatoken","active","_datatoken$balance","String","greaterThan","isMinter","FixedRateExchange","FixedRateExchangeAbi","generateExchangeId","baseToken","buyDatatokens","exchangeId","datatokenAmount","maxBaseTokenAmount","consumeMarketAddress","consumeMarketFee","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","buyDT","sellDatatokens","minBaseTokenAmount","minBtFormatted","sellDT","getNumberOfExchanges","setRate","newRate","toggleExchangeState","_this16","_this16$config","getRate","_this18","weiRate","getDatatokenSupply","_this20","getDTSupply","dtSupply","getBasetokenSupply","_this22","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenDatatokensOut","_this26","fixedRateExchange","_this25$contract$meth","_calcBaseInGivenOutDT","calcBaseInGivenOutDT","_this25$amountToUnits","outDT","baseTokenAmount","_this25$unitsToAmount","marketFeeAmount","_this25$unitsToAmount2","oceanFeeAmount","_this25$unitsToAmount3","consumeMarketFeeAmount","_this25$unitsToAmount4","getAmountBasetokensOut","_this28","_this27$contract$meth","_calcBaseOutGivenInDT","calcBaseOutGivenInDT","_this27$amountToUnits","_this30","dtBalance","_this29$unitsToAmount","btBalance","_this29$unitsToAmount2","_this29$unitsToAmount3","_this29$unitsToAmount4","fixedRate","getFeesInfo","_this32","feesInfo","opcFee","marketFee","marketFeeAvailable","_this31$unitsToAmount","oceanFeeAvailable","_this31$unitsToAmount2","getExchanges","isActive","activateMint","_this38","withMint","toggleMintState","_this38$config","deactivateMint","_this40","_this40$config","collectBasetokens","_this42","fixedrate","amountWei","collectBT","_this42$config","collectDatatokens","_this44","collectDT","_this44$config","collectMarketFee","_this46","_this46$config","collectOceanFee","_this48","_this48$config","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this53$getExchange","exchangeOwner","updateMarketFee","newMarketFee","_this56","_this56$config","updateMarketFeeCollector","newMarketFeeCollector","_this58","_this58$config","Router","FactoryRouter","buyDatatokenBatch","operations","buyDTBatch","_this2$config","isApprovedToken","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","addApprovedToken","_this11$getOwner","removeApprovedToken","_this13$getOwner","addFixedRateContract","_this15$getOwner","removeFixedRateContract","_this17$getOwner","_this18$config","addDispenserContract","_this19$getOwner","_this20$config","removeDispenserContract","_this21$getOwner","_this22$config","getOPCFee","getCurrentOPCFee","swapOceanFee","updateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","_this27$getOwner","_this28$config","Nft","ERC721Template","createDatatoken","minter","paymentCollector","mpFeeAddress","feeToken","feeAmount","cap","templateIndex","getNftPermissions","_this$getNftPermissio","deployERC20","_generateDtName","nftContract","createERC20","_trxReceipt$events","_trxReceipt$events$To","_trxReceipt$events$To2","events","TokenCreated","returnValues","addManager","manager","getNftOwner","_this3$getNftOwner","removeManager","_this5$getNftOwner","addDatatokenDeployer","datatokenDeployer","_this7$getNftPermissi","addToCreateERC20List","removeDatatokenDeployer","_this9$getNftPermissi","_this9$getNftPermissi2","_temp","removeFromCreateERC20List","addMetadataUpdater","metadataUpdater","_this11$getNftPermiss","addToMetadataList","removeMetadataUpdater","_this13$getNftPermiss","_this13$getNftPermiss2","updateMetadata","removeFromMetadataList","addStoreUpdater","storeUpdater","_this15$getNftPermiss","addTo725StoreList","removeStoreUpdater","_this17$getNftPermiss","_this17$getNftPermiss2","store","removeFrom725StoreList","cleanPermissions","_this19$getNftOwner","transferNft","nftOwner","nftReceiver","tokenId","_this21$getNftOwner","tokenIdentifier","transferFrom","safeTransferNft","_this24","_this23$getNftOwner","safeTransferFrom","_this24$config","setMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","_this25$getNftPermiss","setMetaData","_this26$config","setMetadataAndTokenURI","metadataAndTokenURI","_this27$getNftPermiss","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataState","_this29$getNftPermiss","setMetaDataState","_this30$config","setTokenURI","_this32$config","ownerOf","getPermissions","getMetadata","getMetaData","isDatatokenDeployer","isERC20Deployer","setData","key","value","_this41$getNftPermiss","keyHash","keccak256","valueHex","asciiToHex","setNewData","getData","hexToAscii","getTokenURI","id","tokenURI","Datatoken","abiEnterprise","nft","ERC20TemplateEnterprise","ERC20Template","dtContract","_this3","_this3$config","createFixedRate","fixedRateParams","_this5","_this4$isDatatokenDep","allowedConsumer","fixedRateAddress","baseTokenAddress","owner","marketFeeCollector","baseTokenDecimals","datatokenDecimals","_this5$config","createDispenser","dispenserParams","_this7","_this6$isDatatokenDep","_this7$config","mint","toAddress","_this9","_this8$getPermissions","getCap","capAvailble","gte","_this9$config","addMinter","_this11","_this10$isDatatokenDe","_this11$config","removeMinter","_this13","_this12$isDatatokenDe","_this13$config","addPaymentManager","paymentManager","_this15","_this14$isDatatokenDe","_this15$config","removePaymentManager","_this17","_this16$isDatatokenDe","_this17$config","setPaymentCollector","_this19","_this18$getPermission","_this18$nft$getNftOwn","nftPermissions","isPaymentManager","isNftOwner","_this19$config","getNFTAddress","getPaymentCollector","weiAmount","transferWei","_this25","_this25$config","startOrder","consumer","serviceIndex","providerFees","_this27","consumeMarketFeeAddress","consumeMarketFeeToken","_this27$config","reuseOrder","orderTxId","_this29","_this29$config","buyFromFreAndOrder","orderParams","freParams","_this31","getFreOrderParams","freContractParams","_this31$config","buyFromDispenserAndOrder","dispenserContract","_this33","_this33$config","_this35","_this34$isDatatokenDe","_this35$config","_this36$nft2","_this37","_getNftOwner2","_this36$getNFTAddress","_this36$nft$getNftOwn","_this37$config","permissions","_this41","getDecimals","getSymbol","getName","getERC721Address","datatokenAddress","_this53","setPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","_this55","getPublishingMarketFee","_dtContract$methods$g","_this55$config","publishingMarketFee","_freParams$exchangeId2","_freParams$exchangeCo2","exchangeContract","_this59","_amountToUnits","swapMarketFee","_amountToUnits2","marketFeeAddress","NftFactory","createNFT","nftData","_nftData$templateInde2","getCurrentNFTTemplateCount","_this$getCurrentNFTTe","getNFTTemplate","_this$getNFTTemplate","deployERC721Contract","transferable","_trxReceipt$events$NF","_trxReceipt$events$NF2","NFTCreated","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","_this13$getCurrentNFT","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","addNFTTemplate","templateAddress","add721TokenTemplate","disableNFTTemplate","_this23$getOwner","_this23$getCurrentNFT","disable721TokenTemplate","reactivateNFTTemplate","_this25$getOwner","_this25$getCurrentNFT","reactivate721TokenTemplate","addTokenTemplate","disableTokenTemplate","_this29$getOwner","_this29$getCurrentTok","_this29$getTokenTempl","reactivateTokenTemplate","_this31$getOwner","_this31$getCurrentTok","_this31$getTokenTempl","startMultipleTokenOrder","orders","_this34","_this34$config","createNftWithDatatoken","nftCreateData","dtParams","ercCreateData","_this36","getErcCreationParams","createNftWithErc20","_this36$config","createNftWithDatatokenWithFixedRate","fixedData","getFreCreationParams","createNftWithErc20WithFixedRate","createNftWithDatatokenWithDispenser","createNftWithErc20WithDispenser","_generateDtName2","strings","addresses","uints","bytess","fixedPriceAddress","VeOcean","veOceanABI","lockTokens","userAddress","unlockTime","getToken","_this$getToken","create_lock","depositFor","fromUserAddress","_amountToUnits4","_this3$getToken","deposit_for","increaseAmount","_amountToUnits6","_this5$getToken","increase_amount","increaseUnlockTime","increase_unlock_time","withdraw","getVotingPower","getLockedAmount","locked","_unitsToAmount","_this13$getToken","lockEnd","locked__end","totalSupply","_unitsToAmount3","_this17$getToken","_this17$contract$meth","VeFeeDistributor","veFeeABI","claim","claimMany","claim_many","VeFeeEstimate","estimateClaim","voting_escrow","_this$contract$method","veOcean","_veOcean$getToken","VeAllocate","veAllocateABI","setAllocation","setBatchAllocation","getTotalAllocation","getVeAllocation","getveAllocation","_settle","pact","state","bind","DfRewards","dfRewardsABI","getAvailableRewards","claimable","rewards","claimRewards","claimFor","allocateRewards","userAddresses","amounts","allocate","i","_this5$amountToUnits","DfStrategyV1","dfStrategyV1ABI","getMultipleAvailableRewards","tokenAddresses","claimables","rewardsFormated","_push","push","_this$unitsToAmount","claimMultipleRewards","claimMultiple","o","Aquarius","aquariusURL","did","signal","path","json","waitForAqua","txid","tries","_do","_result","ddo","event","_result3","validate","jsonResponse","valid","JSON","stringify","_response$json","hash","proof","validatorAddress","publicKey","errors","getAssetMetadata","statusText","querySearch","query","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","_this3$getServiceEndp","_this3$getEndpoints","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","encrypt","text","checkDidFiles","serviceId","withChecksum","args","checksum","files","results","_step","_iterator","_createForOfIteratorHelperLoose","done","getFileInfo","file","_step2","_iterator2","getComputeEnvironments","_this12$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","output","computeStartUrl","signatureMessage","documentId","payload","Object","environment","_exit","_error","_response$statusText","_response$status","_response$json2","params","computeStop","jobId","computeStopUrl","noZeroX","_temp10","_result2","computeStatus","computeStatusUrl","_exit3","_temp12","_temp11","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","_temp14","_result4","_temp13","isValidProvider","_exit5","_temp15","providerAddresses","_result5","input","zeroXTransformer","zeroOutput","_this$inputMatch","inputMatch","regexp","conversorName","ProviderInstance"],"mappings":"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"}