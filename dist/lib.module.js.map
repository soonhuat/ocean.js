{"version":3,"file":"lib.module.js","sources":["../src/config/Config.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/DatatokenName.ts","../src/utils/DdoHelpers.ts","../src/utils/FetchHelper.ts","../src/utils/Logger.ts","../src/utils/General.ts","../src/utils/minAbi.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/config/ConfigHelper.ts","../src/contracts/SmartContract.ts","../src/contracts/SmartContractWithAddress.ts","../src/contracts/Dispenser.ts","../src/contracts/FixedRateExchange.ts","../src/contracts/Router.ts","../src/contracts/NFT.ts","../src/contracts/Datatoken.ts","../src/contracts/NFTFactory.ts","../src/contracts/ve/VeOcean.ts","../src/contracts/ve/VeFeeDistributor.ts","../src/contracts/ve/VeFeeEstimate.ts","../src/contracts/ve/VeAllocate.ts","../src/contracts/df/DfRewards.ts","../src/contracts/df/DfStrategyV1.ts","../src/services/Aquarius.ts","../src/services/Provider.ts"],"sourcesContent":["import { AbiItem } from 'web3-utils/types'\nimport { LogLevel } from '../utils'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public nftFactoryAddress?: string\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, goerli, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n\n  veAllocate?: string\n  veOCEAN?: string\n  veDelegation?: string\n  veFeeDistributor?: string\n  veDelegationProxy?: string\n  DFRewards?: string\n  DFStrategyV1?: string\n  veFeeEstimate?: string\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\nexport const MAX_UINT_256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\nexport const FEE_HISTORY_NOT_SUPPORTED =\n  'Returned error: Method eth_feeHistory not supported.'\n","import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { Config } from '../config'\nimport { minAbi, GASLIMIT_DEFAULT, LoggerInstance, FEE_HISTORY_NOT_SUPPORTED } from '.'\nimport { TransactionReceipt } from 'web3-core'\n\nconst MIN_GAS_FEE_POLYGON = 30000000000 // minimum recommended 30 gwei polygon main and mumbai fees\nconst POLYGON_NETWORK_ID = 137\nconst MUMBAI_NETWORK_ID = 80001\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  return contract\n}\n\nexport async function getFairGasPrice(\n  web3: Web3,\n  gasFeeMultiplier: number\n): Promise<string> {\n  const x = new BigNumber(await web3.eth.getGasPrice())\n  if (gasFeeMultiplier)\n    return x\n      .multipliedBy(gasFeeMultiplier)\n      .integerValue(BigNumber.ROUND_DOWN)\n      .toString(10)\n  else return x.toString(10)\n}\n\nexport async function unitsToAmount(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, token)\n  let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n  if (decimals === '0') {\n    decimals = 18\n  }\n\n  const amountFormatted = new BigNumber(amount).div(\n    new BigNumber(10).exponentiatedBy(decimals)\n  )\n\n  BigNumber.config({ EXPONENTIAL_AT: 50 })\n  return amountFormatted.toString()\n}\n\nexport async function amountToUnits(\n  web3: Web3,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, token)\n  let decimals = tokenDecimals || (await tokenContract.methods.decimals().call())\n  if (decimals === '0') {\n    decimals = 18\n  }\n  BigNumber.config({ EXPONENTIAL_AT: 50 })\n\n  const amountFormatted = new BigNumber(amount).times(\n    new BigNumber(10).exponentiatedBy(decimals)\n  )\n  return amountFormatted.toFixed(0)\n}\n\n/**\n * Estimates the gas used when a function would be executed on chain\n * @param {string} from account that calls the function\n * @param {Function} functionToEstimateGas function that we need to estimate the gas\n * @param {...any[]} args arguments of the function\n * @return {Promise<number>} gas cost of the function\n */\nexport async function calculateEstimatedGas(\n  from: string,\n  functionToEstimateGas: Function,\n  ...args: any[]\n): Promise<number> {\n  const estimatedGas = await functionToEstimateGas\n    .apply(null, args)\n    .estimateGas({ from }, (err, estGas) => (err ? GASLIMIT_DEFAULT : estGas))\n  return estimatedGas\n}\n\n/**\n * Send the transation on chain\n * @param {string} from account that calls the function\n * @param {any} estGas estimated gas for the transaction\n * @param {Web3} web3 web3 objcet\n * @param {Function} functionToSend function that we need to send\n * @param {...any[]} args arguments of the function\n * @return {Promise<any>} transaction receipt\n */\nexport async function sendTx(\n  from: string,\n  estGas: number,\n  web3: Web3,\n  gasFeeMultiplier: number,\n  functionToSend: Function,\n  ...args: any[]\n): Promise<TransactionReceipt> {\n  const sendTxValue: Record<string, any> = {\n    from,\n    gas: estGas + 1\n  }\n  const networkId = await web3.eth.getChainId()\n  try {\n    const feeHistory = await web3.eth.getFeeHistory(1, 'latest', [75])\n    if (feeHistory && feeHistory?.baseFeePerGas?.[0] && feeHistory?.reward?.[0]?.[0]) {\n      let aggressiveFee = new BigNumber(feeHistory?.reward?.[0]?.[0])\n      if (gasFeeMultiplier > 1) {\n        aggressiveFee = aggressiveFee.multipliedBy(gasFeeMultiplier)\n      }\n\n      sendTxValue.maxPriorityFeePerGas = aggressiveFee\n        .integerValue(BigNumber.ROUND_DOWN)\n        .toString(10)\n\n      sendTxValue.maxFeePerGas = aggressiveFee\n        .plus(new BigNumber(feeHistory?.baseFeePerGas?.[0]).multipliedBy(2))\n        .integerValue(BigNumber.ROUND_DOWN)\n        .toString(10)\n\n      // if network is polygon and mumbai and fees is lower than the 30 gwei trashold, sets MIN_GAS_FEE_POLYGON\n      sendTxValue.maxPriorityFeePerGas =\n        (networkId === MUMBAI_NETWORK_ID || networkId === POLYGON_NETWORK_ID) &&\n        new BigNumber(sendTxValue.maxPriorityFeePerGas).lte(\n          new BigNumber(MIN_GAS_FEE_POLYGON)\n        )\n          ? new BigNumber(MIN_GAS_FEE_POLYGON)\n              .integerValue(BigNumber.ROUND_DOWN)\n              .toString(10)\n          : sendTxValue.maxPriorityFeePerGas\n\n      sendTxValue.maxFeePerGas =\n        (networkId === MUMBAI_NETWORK_ID || networkId === POLYGON_NETWORK_ID) &&\n        new BigNumber(sendTxValue.maxFeePerGas).lte(new BigNumber(MIN_GAS_FEE_POLYGON))\n          ? new BigNumber(MIN_GAS_FEE_POLYGON)\n              .integerValue(BigNumber.ROUND_DOWN)\n              .toString(10)\n          : sendTxValue.maxFeePerGas\n    } else {\n      sendTxValue.gasPrice = await getFairGasPrice(web3, gasFeeMultiplier)\n    }\n  } catch (err) {\n    err?.message === FEE_HISTORY_NOT_SUPPORTED &&\n      LoggerInstance.log(\n        'Not able to use EIP 1559, getFeeHistory method not suported by network.'\n      )\n    sendTxValue.gasPrice = await getFairGasPrice(web3, gasFeeMultiplier)\n  }\n\n  const trxReceipt = await functionToSend.apply(null, args).send(sendTxValue)\n  return trxReceipt\n}\n","import wordListDefault from './data/words.json'\n\n/**\n * Generate new datatoken name & symbol from a word list\n * @return {<{ name: String; symbol: String }>} datatoken name & symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import sha256 from 'crypto-js/sha256'\nimport Web3 from 'web3'\n\nexport function generateDid(nftAddress: string, chainId: number): string {\n  nftAddress = Web3.utils.toChecksumAddress(nftAddress)\n  const checksum = sha256(nftAddress + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\nexport function getHash(data: any): string {\n  return sha256(data).toString()\n}\n","import fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types'\n\nexport async function downloadFileBrowser(url: string): Promise<void> {\n  const headResponse = await fetch(url, { method: 'HEAD' })\n  const contentHeader = headResponse.headers.get('content-disposition')\n  const fileName = contentHeader?.split('=')[1] ? contentHeader?.split('=')[1] : 'file'\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'blob'\n  xhr.open('GET', url)\n  xhr.onload = () => {\n    const blobURL = window.URL.createObjectURL(xhr.response)\n    const a = document.createElement('a')\n    a.href = blobURL\n    a.setAttribute('download', fileName)\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    window.URL.revokeObjectURL(blobURL)\n  }\n  xhr.send(null)\n}\n\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n","/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel: LogLevel = LogLevel.Error) {}\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\n","/**\n * Simple blocking sleep function\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","import { AbiItem } from 'web3-utils/types'\n\nexport const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n] as AbiItem[]\n","import Web3 from 'web3'\n\nexport async function signHash(web3: Web3, message: string, address: string) {\n  let signedMessage = await web3.eth.sign(message, address)\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  // make sure we obey 27 and 28 standards\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport {\n  amountToUnits,\n  calculateEstimatedGas,\n  unitsToAmount,\n  minAbi,\n  sendTx,\n  LoggerInstance\n} from '.'\nimport { Config } from '../config'\nimport { ReceiptOrEstimate } from '../@types'\n\n/**\n * Approve spender to spent amount tokens\n * @param {Web3} web3\n * @param {Config} config\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 Datatokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} tokenDecimals optional number of decimals of the token\n * @param {boolean} estimateGas  if true, returns the estimate gas cost for calling the method\n */\nexport async function approve<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowance(web3, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return <ReceiptOrEstimate<G>>new Decimal(currentAllowence).toNumber()\n    }\n  }\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount, tokenDecimals)\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  const trxReceipt = await sendTx(\n    account,\n    estGas + 1,\n    web3,\n    config?.gasFeeMultiplier,\n    tokenContract.methods.approve,\n    spender,\n    amountFormatted\n  )\n  return <ReceiptOrEstimate<G>>trxReceipt\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {Web3} web3\n * @param {Config} config\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} spender\n * @param {String} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {boolean} estimateGas  if true, returns the estimate gas cost for calling the method\n */\nexport async function approveWei<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  if (!force) {\n    const currentAllowence = await allowanceWei(web3, tokenAddress, account, spender)\n    if (new BigNumber(currentAllowence).gt(new BigNumber(amount))) {\n      return <ReceiptOrEstimate<G>>new Decimal(currentAllowence).toNumber()\n    }\n  }\n  let result = null\n\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.approve,\n    spender,\n    amount\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  try {\n    result = await sendTx(\n      account,\n      estGas + 1,\n      web3,\n      config?.gasFeeMultiplier,\n      tokenContract.methods.approve,\n      spender,\n      amount\n    )\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {String} account\n * @param {String} tokenAddress\n * @param {String} recipient\n * @param {String} amount amount of ERC20 Datatokens (not as wei)\n * @param {String} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n */\nexport async function transfer<G extends boolean = false>(\n  web3: Web3,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n\n  const amountFormatted = await amountToUnits(web3, tokenAddress, amount)\n  const estGas = await calculateEstimatedGas(\n    account,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  const trxReceipt = await sendTx(\n    account,\n    estGas + 1,\n    web3,\n    config?.gasFeeMultiplier,\n    tokenContract.methods.transfer,\n    recipient,\n    amountFormatted\n  )\n  return <ReceiptOrEstimate<G>>trxReceipt\n}\n\n/**\n * Get Allowance for any Datatoken\n * @param {Web3} web3\n * @param {String } tokenAdress\n * @param {String} account\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n */\nexport async function allowance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.allowance(account, spender).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any Datatoken\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} owner\n * @param {String} spender\n * @param {number} tokenDecimals optional number of decimals of the token\n */\nexport async function balance(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  const trxReceipt = await tokenContract.methods.balanceOf(account).call()\n\n  return await unitsToAmount(web3, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance for any erc20\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @param {String} account\n * @param {String} spender\n */\nexport async function allowanceWei(\n  web3: Web3,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.allowance(account, spender).call()\n}\n\n/**\n * Get decimals for any Datatoken\n * @param {Web3} web3\n * @param {String} tokenAdress\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(web3: Web3, tokenAddress: string): Promise<number> {\n  const tokenContract = new web3.eth.Contract(minAbi, tokenAddress)\n  return await tokenContract.methods.decimals().call()\n}\n","// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport { Config } from '.'\nimport { LoggerInstance } from '../utils'\n// eslint-disable-next-line import/no-named-default\nimport { default as CustomContractAddressess } from '../../address.json'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'https://v4.provider.oceanprotocol.com',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    metadataCacheUri: 'http://172.15.0.5:5000', // use http://127.0.0.1:5000/ if running on macOS\n    providerUri: 'http://172.15.0.4:8030', // use http://127.0.0.1:8030/ if running on macOS\n    subgraphUri: 'https://172.15.0.15:8000' // use http://127.0.0.1:9000/ if running on macOS\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 5,\n    network: 'goerli',\n    nodeUri: 'https://goerli.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://goerli.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN',\n    gasFeeMultiplier: 1.6\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 81001,\n    network: 'polygonedge',\n    nodeUri: 'https://rpc-edgenet.polygon.technology',\n    providerUri: 'https://v4.provider.goerli.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://explorer-edgenet.polygon.technology/',\n    gasFeeMultiplier: 1.05\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n\n    // load from custom addresses structure\n    if (customAddresses) {\n      const {\n        FixedPrice,\n        Dispenser,\n        ERC721Factory,\n        OPFCommunityFeeCollector,\n        Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate\n      } = customAddresses[network]\n      configAddresses = {\n        nftFactoryAddress: ERC721Factory,\n        opfCommunityFeeCollector: OPFCommunityFeeCollector,\n        fixedRateExchangeAddress: FixedPrice,\n        dispenserAddress: Dispenser,\n        oceanTokenAddress: Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate,\n        ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          nftFactoryAddress: ERC721Factory,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate,\n          ...(process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(\n        `No config found for given network '${network}' filter by '${filterBy}'`\n      )\n      return null\n    }\n\n    const contractAddressesConfig = this.getAddressesFromEnv(\n      config.network,\n      CustomContractAddressess\n    )\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import Web3 from 'web3'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport { Config, ConfigHelper } from '../config'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from '../utils'\n\nexport abstract class SmartContract {\n  public web3: Web3\n  public config: Config\n  public abi: AbiItem | AbiItem[]\n\n  abstract getDefaultAbi(): AbiItem | AbiItem[]\n\n  /**\n   * Instantiate the smart contract.\n   * @param {Web3} web3\n   * @param {string | number} network Network id or name\n   * @param {Config} config Configutation of the smart contract\n   * @param {AbiItem | AbiItem[]} abi ABI of the smart contract\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[]\n  ) {\n    this.web3 = web3\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.abi = abi || (this.getDefaultAbi() as AbiItem[])\n  }\n\n  protected async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.web3, token, amount, tokenDecimals)\n  }\n\n  protected async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.web3, token, amount, tokenDecimals)\n  }\n\n  protected async getFairGasPrice(): Promise<string> {\n    return getFairGasPrice(this.web3, this.config?.gasFeeMultiplier)\n  }\n\n  protected getContract(\n    address: string,\n    account?: string,\n    abi?: AbiItem | AbiItem[]\n  ): Contract {\n    const contract = new this.web3.eth.Contract(abi || this.abi, address, {\n      from: account\n    })\n    return setContractDefaults(contract, this.config)\n  }\n}\n","import Web3 from 'web3'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\n\nexport abstract class SmartContractWithAddress extends SmartContract {\n  public address: string\n  public contract: Contract\n\n  /**\n   * Instantiate the smart contract.\n   * @param {string} address Address of the smart contract\n   * @param {Web3} web3\n   * @param {string | number} network Network id or name\n   * @param {Config} config Configutation of the smart contract\n   * @param {AbiItem | AbiItem[]} abi ABI of the smart contract\n   */\n  constructor(\n    address: string,\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[]\n  ) {\n    super(web3, network, config, abi)\n    this.address = address\n    this.contract = this.getContract(this.address)\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport Decimal from 'decimal.js'\nimport DispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport { calculateEstimatedGas, sendTx } from '../utils'\nimport { Datatoken } from './Datatoken'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\nimport { DispenserToken, ReceiptOrEstimate } from '../@types'\n\nexport class Dispenser extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return DispenserAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    const status: DispenserToken = await this.contract.methods.status(dtAdress).call()\n    if (!status) {\n      throw new Error(`Np dispenser found for the given datatoken address`)\n    }\n    status.maxTokens = this.web3.utils.fromWei(status.maxTokens)\n    status.maxBalance = this.web3.utils.fromWei(status.maxBalance)\n    status.balance = this.web3.utils.fromWei(status.balance)\n    return status\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async create<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Call createFixedRate contract method\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.create,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance),\n      address,\n      allowedSwapper\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activates a new dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async activate<G extends boolean = false>(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.activate,\n      dtAddress,\n      this.web3.utils.toWei(maxTokens),\n      this.web3.utils.toWei(maxBalance)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async deactivate<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.deactivate,\n      dtAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deactivate,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowedSwapper.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the datatoken)\n   * @param {String} newAllowedSwapper refers to the new allowedSwapper\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough DT (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address\n   * @param {String} amount amount of datatokens required.\n   * @param {String} destination who will receive the tokens\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async dispense<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    amount: string = '1',\n    destination: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.dispense,\n      dtAddress,\n      this.web3.utils.toWei(amount),\n      destination\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {String} address User address (must be owner of the dispenser)\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async ownerWithdraw<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.ownerWithdraw,\n      dtAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.ownerWithdraw,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import FixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { AbiItem } from 'web3-utils/types'\nimport { calculateEstimatedGas, sendTx, ZERO_ADDRESS } from '../utils'\nimport { PriceAndFees, FeesInfo, FixedPriceExchange, ReceiptOrEstimate } from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\nexport class FixedRateExchange extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return FixedRateExchangeAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.methods\n      .generateExchangeId(baseToken, datatoken)\n      .call()\n    return exchangeId\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async buyDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sell datatokenAmount while expecting at least minBaseTokenAmount\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} address User address\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async sellDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = this.web3.utils.toWei(consumeMarketFee)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.methods.getNumberOfExchanges().call()\n    return numExchanges\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newRate New rate\n   * @param {String} address User account\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setRate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newRate: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setRate,\n      exchangeId,\n      this.web3.utils.toWei(newRate)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowedSwapper\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newAllowedSwapper newAllowedSwapper (set address zero if we want to remove allowed swapper)\n   * @param {String} address User account\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivate<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get Rate\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.methods.getRate(exchangeId).call()\n    const rate = await this.web3.utils.fromWei(weiRate)\n    return rate\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDatatokenSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.methods.getDTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Get BaseToken Supply in the exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBasetokenSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.methods.getBTSupply(exchangeId).call()\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<string>} address of allowedSwapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.methods.getAllowedSwapper(exchangeId).call()\n  }\n\n  /**\n   * calcBaseInGivenDatatokensOut - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId ExchangeId\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenDatatokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const outDT = await this.contract.methods\n      .calcBaseInGivenOutDT(\n        exchangeId,\n        await this.amountToUnits(\n          fixedRateExchange.datatoken,\n          datatokenAmount,\n          +fixedRateExchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.marketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * getBTOut - returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId ExchangeId\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBasetokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const amount = await this.contract.methods\n      .calcBaseOutGivenInDT(\n        exchangeId,\n        await this.amountToUnits(\n          exchange.datatoken,\n          datatokenAmount,\n          +exchange.dtDecimals\n        ),\n        this.web3.utils.toWei(consumeMarketFee)\n      )\n      .call()\n\n    return await this.unitsToAmount(exchange.baseToken, amount[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const exchange: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    exchange.dtDecimals = exchange.dtDecimals.toString()\n    exchange.btDecimals = exchange.btDecimals.toString()\n    exchange.dtBalance = await this.unitsToAmount(\n      exchange.datatoken,\n      exchange.dtBalance,\n      +exchange.dtDecimals\n    )\n    exchange.btBalance = await this.unitsToAmount(\n      exchange.baseToken,\n      exchange.btBalance,\n      +exchange.btDecimals\n    )\n    exchange.dtSupply = await this.unitsToAmount(\n      exchange.datatoken,\n      exchange.dtSupply,\n      +exchange.dtDecimals\n    )\n    exchange.btSupply = await this.unitsToAmount(\n      exchange.baseToken,\n      exchange.btSupply,\n      +exchange.btDecimals\n    )\n    exchange.fixedRate = this.web3.utils.fromWei(exchange.fixedRate)\n    exchange.exchangeId = exchangeId\n    return exchange\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const feesInfo: FeesInfo = await this.contract.methods.getFeesInfo(exchangeId).call()\n    feesInfo.opcFee = this.web3.utils.fromWei(feesInfo.opcFee.toString())\n    feesInfo.marketFee = this.web3.utils.fromWei(feesInfo.marketFee.toString())\n\n    const exchange = await this.getExchange(exchangeId)\n    feesInfo.marketFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      feesInfo.marketFeeAvailable,\n      +exchange.btDecimals\n    )\n    feesInfo.oceanFeeAvailable = await this.unitsToAmount(\n      exchange.baseToken,\n      feesInfo.oceanFeeAvailable,\n      +exchange.btDecimals\n    )\n\n    feesInfo.exchangeId = exchangeId\n    return feesInfo\n  }\n\n  /**\n   * Get all exchanges\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.methods.getExchanges().call()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>} Result\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const active = await this.contract.methods.isActive(exchangeId).call()\n    return active\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activateMint<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      true\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivateMint<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.toggleMintState,\n      exchangeId,\n      false\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectBasetokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectBT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} address User address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} amount amount to be collected\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectDatatokens<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.methods\n      .getExchange(exchangeId)\n      .call()\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectDT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectMarketFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectMarketFee,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectMarketFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId ExchangeId\n   * @param {String} address User address\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectOceanFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.collectOceanFee,\n      exchangeId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.collectOceanFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    const address = await this.contract.methods.opcCollector().call()\n    return address\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  public async getRouter(): Promise<string> {\n    const address = await this.contract.methods.router().call()\n    return address\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId ExchangeId\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    const address = await (await this.getExchange(exchangeId)).exchangeOwner\n    return address\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFee New market fee\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFee<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newMarketFee: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateMarketFee,\n      exchangeId,\n      this.web3.utils.toWei(newMarketFee)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} address user address\n   * @param {String} exchangeId ExchangeId\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFeeCollector<G extends boolean = false>(\n    address: string,\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport FactoryRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { calculateEstimatedGas, sendTx } from '../utils'\nimport { Operation, ReceiptOrEstimate } from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return FactoryRouter.abi as AbiItem[]\n  }\n\n  /**\n   * buyDatatokenBatch\n   * @param {String} address\n   * @param {Operation} operations Operations objects array\n   * @return {Promise<ReceiptOrEstimate>} Transaction receipt\n   */\n  public async buyDatatokenBatch<G extends boolean = false>(\n    address: string,\n    operations: Operation[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.buyDTBatch,\n      operations\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.buyDTBatch,\n      operations\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Check if a token is on approved tokens list, if true opfFee is lower in pools with that token/DT\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.contract.methods.isApprovedToken(address).call()\n  }\n\n  /** Check if an address is a Fixed Rate contract.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.contract.methods.isFixedRateContract(address).call()\n  }\n\n  /** Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.contract.methods.routerOwner().call()\n  }\n\n  /** Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.contract.methods.factory().call()\n  }\n\n  /**\n   * Adds a token to the list of tokens with reduced fees\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addApprovedToken,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addApprovedToken,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a token if exists from the list of tokens with reduced fees\n   * @param {String} address\n   * @param {String} tokenAddress address to remove\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeApprovedToken,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeApprovedToken,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of fixed rate contracts\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addFixedRateContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of fixed rate contracts\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeFixedRateContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of dispensers\n   * @param {String} address\n   * @param {String} tokenAddress contract address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addDispenserContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of dispensers\n   * @param {String} address\n   * @param {String} tokenAddress address Contract to be removed\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.removeDispenserContract,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.removeDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.contract.methods.getOPCFee(baseToken).call()\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.contract.methods.swapOceanFee().call()\n  }\n\n  /**\n   * Updates OP Community Fees\n   * @param {String} address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async updateOPCFee<G extends boolean = false>(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport ERC721Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport { generateDtName, calculateEstimatedGas, sendTx } from '../utils'\nimport {\n  MetadataProof,\n  MetadataAndTokenURI,\n  NftRoles,\n  ReceiptOrEstimate\n} from '../@types'\nimport { SmartContract } from './SmartContract'\n\nexport class Nft extends SmartContract {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC721Template.abi as AbiItem[]\n  }\n\n  /**\n   * Create new ERC20 Datatoken - only user with DatatokenDeployer permission can succeed\n   * @param {String} nftAddress NFT address\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the Datatoken\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @return {Promise<string>} ERC20 Datatoken address\n   */\n  public async createDatatoken<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    estimateGas?: G\n  ): Promise<G extends false ? string : number> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n    if (estimateGas) return <G extends false ? string : number>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [this.web3.utils.toWei(cap), this.web3.utils.toWei(feeAmount)],\n      []\n    )\n\n    return trxReceipt?.events?.TokenCreated?.returnValues?.[0]\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addManager,\n      manager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeManager,\n      manager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer User adress which is going to have DatatokenDeployer permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addToCreateERC20List,\n      datatokenDeployer\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addToCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer Address of the user to be revoked DatatokenDeployer Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === datatokenDeployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor DatatokenDeployer`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFromCreateERC20List,\n      datatokenDeployer\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFromCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addToMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFromMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.addTo725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to remove all ROLES at NFT level: Managers, DatatokenDeployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at Datatoken level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.cleanPermissions\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async transferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await calculateEstimatedGas(\n      nftOwner,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      nftOwner,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async safeTransferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await calculateEstimatedGas(\n      nftOwner,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      nftOwner,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates or update Metadata cached by Aquarius. Also, updates the METADATA_DECRYPTOR key\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @param {String} address Caller address NFT Owner adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadata<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataAndTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await calculateEstimatedGas(\n      metadataUpdater,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      metadataUpdater,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataState<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setMetaDataState,\n      metadataState\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** set TokenURI on an nft\n   * @param nftAddress NFT contract address\n   * @param address user adress\n   * @param data input data for TokenURI\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    data: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setTokenURI,\n      '1',\n      data\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setTokenURI,\n      '1',\n      data\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get Owner\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const trxReceipt = await nftContract.methods.ownerOf(1).call()\n    return trxReceipt\n  }\n\n  /** Get users NFT Permissions\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<NftRoles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<NftRoles> {\n    const nftContract = this.getContract(nftAddress)\n    const roles = await nftContract.methods.getPermissions(address).call()\n    return roles\n  }\n\n  /** Get users Metadata, return Metadata details\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = this.getContract(nftAddress)\n    return await nftContract.methods.getMetaData().call()\n  }\n\n  /** Get users DatatokenDeployer role\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(\n    nftAddress: string,\n    address: string\n  ): Promise<boolean> {\n    const nftContract = this.getContract(nftAddress)\n    const isDatatokenDeployer = await nftContract.methods.isERC20Deployer(address).call()\n    return isDatatokenDeployer\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param nftAddress erc721 contract adress\n   * @param address user adress\n   * @param key Key of the data to be stored into 725Y standard\n   * @param value Data to be stored into 725Y standard\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData(\n    nftAddress: string,\n    address: string,\n    key: string,\n    value: string\n  ): Promise<TransactionReceipt> {\n    if ((await this.getNftPermissions(nftAddress, address)).store !== true) {\n      throw new Error(`User is not ERC20 store updater`)\n    }\n\n    const nftContract = this.getContract(nftAddress)\n\n    const keyHash = this.web3.utils.keccak256(key)\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      nftContract.methods.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    return trxReceipt\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress NFT contract address\n   * @param {String} key the key which value to retrieve\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const keyHash = this.web3.utils.keccak256(key)\n    const data = await nftContract.methods.getData(keyHash).call()\n    return data ? this.web3.utils.hexToAscii(data) : null\n  }\n\n  /** Gets data at a given `key`\n   * @param {String} nftAddress NFT contract address\n   * @param {String} id\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const data = await nftContract.methods.tokenURI(id).call()\n    return data\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { TransactionReceipt } from 'web3-eth'\nimport Decimal from 'decimal.js'\nimport ERC20Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport ERC20TemplateEnterprise from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport { amountToUnits, sendTx, calculateEstimatedGas, ZERO_ADDRESS } from '../utils'\nimport {\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee,\n  DispenserParams,\n  OrderParams,\n  DatatokenRoles,\n  ReceiptOrEstimate\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\n\nexport class Datatoken extends SmartContract {\n  public abiEnterprise: AbiItem | AbiItem[]\n  public nft: Nft\n\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC20Template.abi as AbiItem[]\n  }\n\n  /**\n   * Instantiate ERC20 Datatokens\n   * @param {AbiItem | AbiItem[]} datatokensAbi\n   * @param {Web3} web3\n   */\n  constructor(\n    web3: Web3,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem | AbiItem[],\n    abiEnterprise?: AbiItem | AbiItem[]\n  ) {\n    super(web3, network, config, abi)\n    this.abiEnterprise = abiEnterprise || (ERC20TemplateEnterprise.abi as AbiItem[])\n    this.nft = new Nft(this.web3)\n  }\n\n  /**\n   * Approve\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async approve<G extends boolean = false>(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.approve,\n      spender,\n      this.web3.utils.toWei(amount)\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} fixedPriceAddress\n   * @param {FixedRateParams} fixedRateParams\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async createFixedRate<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint === false ? 0 : 1\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress ispenser contract address\n   * @param {String} dispenserParams\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async createDispenser<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    dispenserParams.withMint = dispenserParams.withMint !== false\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Mint\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async mint<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.getPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await calculateEstimatedGas(\n        address,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n      if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n      const trxReceipt = await sendTx(\n        address,\n        estGas + 1,\n        this.web3,\n        this.config?.gasFeeMultiplier,\n        dtContract.methods.mint,\n        toAddress || address,\n        this.web3.utils.toWei(amount)\n      )\n      return <ReceiptOrEstimate<G>>trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Add Minter for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which is going to be a Minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.addMinter,\n      minter\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.addMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} minter User which will be removed from Minter permission\n   * @param {Contract} contractInstance optional contract instance\n   * @return {Promise<any>}\n   */\n  public async removeMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.removeMinter,\n      minter\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.removeMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add addPaymentManager (can set who's going to collect fee when consuming orders)\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which is going to be a Minter\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addPaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.addPaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removePaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.removePaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setPaymentCollector<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    const isPaymentManager = (await this.getPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isDatatokenDeployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isDatatokenDeployer) {\n      throw new Error(`Caller is not Fee Manager, owner or Datatoken Deployer`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setPaymentCollector,\n      paymentCollector\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const paymentCollector = await dtContract.methods.getPaymentCollector().call()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer as number from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. To be converted to wei.\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transfer(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string\n  ): Promise<TransactionReceipt> {\n    const weiAmount = this.web3.utils.toWei(amount)\n    return this.transferWei(dtAddress, toAddress, weiAmount, address)\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Expressed as wei\n   * @param {String} address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transferWei<G extends boolean = false>(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.transfer,\n      toAddress,\n      amount\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.transfer,\n      toAddress,\n      amount\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async startOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async reuseOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.reuseOrder,\n      orderTxId,\n      providerFees\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.reuseOrder,\n      orderTxId,\n      providerFees\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams Consumer Address\n   * @param {FreParams} freParams Amount of tokens that is going to be transfered\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromFreAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, null, this.abiEnterprise)\n\n    const freContractParams = await this.getFreOrderParams(freParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freContractParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.buyFromFreAndOrder,\n      orderParams,\n      freContractParams\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Gets DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address which calls\n   * @param {OrderParams} orderParams\n   * @param {String} dispenserContract\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromDispenserAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, null, this.abiEnterprise)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(dtAddress)) into NFT 725 Store\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    value: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    const valueHex = this.web3.utils.asciiToHex(value)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setData,\n      valueHex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setData,\n      valueHex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Clean Datatoken level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 Datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param dtAddress Datatoken address where we want to clean permissions\n   * @param address User adress\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.cleanPermissions\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Returns ERC20 Datatoken user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<DatatokenRoles>}\n   */\n  public async getPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<DatatokenRoles> {\n    const dtContract = this.getContract(dtAddress)\n    const roles = await dtContract.methods.permissions(address).call()\n    return roles\n  }\n\n  /** Returns the Datatoken capital\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const cap = await dtContract.methods.cap().call()\n    return this.web3.utils.fromWei(cap)\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const decimals = await dtContract.methods.decimals().call()\n    return decimals\n  }\n\n  /** It returns the token symbol\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getSymbol(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const symbol = await dtContract.methods.symbol().call()\n    return symbol\n  }\n\n  /** It returns the name of the token\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getName(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const name = await dtContract.methods.name().call()\n    return name\n  }\n\n  /** It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const nftAddress = await dtContract.methods.getERC721Address().call()\n    return nftAddress\n  }\n\n  /**  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = this.getContract(dtAddress)\n    const isDatatokenDeployer = await dtContract.methods.isERC20Deployer(address).call()\n    return isDatatokenDeployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = this.getContract(datatokenAddress, address)\n    const balance = await dtContract.methods.balanceOf(address).call()\n    return this.web3.utils.fromWei(balance)\n  }\n\n  /**\n   * @dev setPublishingMarketFee\n   *      Only publishMarketFeeAddress can call it\n   *      This function allows to set the fee required by the publisherMarket\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   */\n  public async setPublishingMarketFee<G extends boolean = false>(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(datatokenAddress, address)\n    const mktFeeAddress = (await dtContract.methods.getPublishingMarketFee().call())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      dtContract.methods.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev getPublishingMarketFee\n   *      Get publishingMarket Fee\n   *      This function allows to get the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string,\n    address: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = this.getContract(datatokenAddress, address)\n\n    const publishingMarketFee = await dtContract.methods.getPublishingMarketFee().call()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2]\n    }\n    return returnValues\n  }\n\n  private async getFreOrderParams(freParams: FreOrderParams): Promise<any> {\n    return {\n      exchangeContract: freParams.exchangeContract,\n      exchangeId: freParams.exchangeId,\n      maxBaseTokenAmount: await amountToUnits(\n        this.web3,\n        freParams.baseTokenAddress,\n        freParams.maxBaseTokenAmount,\n        freParams.baseTokenDecimals\n      ),\n      swapMarketFee: await amountToUnits(\n        this.web3,\n        freParams.baseTokenAddress,\n        freParams.swapMarketFee,\n        freParams.baseTokenDecimals\n      ),\n\n      marketFeeAddress: freParams.marketFeeAddress\n    }\n  }\n}\n","import Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport ERC721Factory from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport { generateDtName, calculateEstimatedGas, ZERO_ADDRESS, sendTx } from '../utils'\nimport {\n  FreCreationParams,\n  DatatokenCreateParams,\n  DispenserCreationParams,\n  NftCreateData,\n  Template,\n  TokenOrder,\n  ReceiptOrEstimate\n} from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return ERC721Factory.abi as AbiItem[]\n  }\n\n  /**\n   * Create new NFT\n   * @param {String} address\n   * @param {NFTCreateData} nftData\n   * @return {Promise<string>} NFT datatoken address\n   */\n  public async createNFT<G extends boolean = false>(\n    address: string,\n    nftData: NftCreateData,\n    estimateGas?: G\n  ): Promise<G extends false ? string : number> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    if (estimateGas) return <G extends false ? string : number>estGas\n\n    // Invoke createToken function of the contract\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    return trxReceipt?.events?.NFTCreated?.returnValues?.[0]\n  }\n\n  /** Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const nftCount = await this.contract.methods.getCurrentNFTCount().call()\n    return nftCount\n  }\n\n  /** Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const tokenCount = await this.contract.methods.getCurrentTokenCount().call()\n    return tokenCount\n  }\n\n  /** Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const owner = await this.contract.methods.owner().call()\n    return owner\n  }\n\n  /** Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.contract.methods.getCurrentNFTTemplateCount().call()\n    return count\n  }\n\n  /** Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of Datatoken Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.contract.methods.getCurrentTemplateCount().call()\n    return count\n  }\n\n  /** Get NFT Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.contract.methods.getNFTTemplate(index).call()\n    return template\n  }\n\n  /** Get Datatoken (ERC20) Template\n   * @param {Number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.contract.methods.getTokenTemplate(index).call()\n    return template\n  }\n\n  /** Check if Datatoken is deployed from the factory\n   * @param {String} datatoken Datatoken address we want to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.contract.methods.erc20List(datatoken).call()\n    return isDeployed\n  }\n\n  /** Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address we want to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.contract.methods.erc721List(nftAddress).call()\n    return confirmAddress\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.add721TokenTemplate,\n      templateAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.add721TokenTemplate,\n      templateAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.disable721TokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.disable721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address\n   * @param {String} templateAddress template address to add\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.addTokenTemplate,\n      templateAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.addTokenTemplate,\n      templateAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.disableTokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.disableTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev startMultipleTokenOrder\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ Datatoken contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - ERC20 Datatokens\n   * @param address Caller address\n   * @param orders an array of struct tokenOrder\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async startMultipleTokenOrder<G extends boolean = false>(\n    address: string,\n    orders: TokenOrder[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.startMultipleTokenOrder,\n      orders\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.startMultipleTokenOrder,\n      orders\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatoken\n   *      Creates a new NFT, then a Datatoken,all in one call\n   * @param address Caller address\n   * @param _NftCreateData input data for nft creation\n   * @param _ErcCreateData input data for Datatoken creation\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n\n  public async createNftWithDatatoken<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatokenWithFixedRate\n   *      Creates a new NFT, then a Datatoken, then a FixedRateExchange, all in one call\n   *      Use this carefully, because if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param dtParams input data for Datatoken Creation\n   * @param freParams input data for FixedRate Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftWithDatatokenWithFixedRate<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    freParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n    const fixedData = this.getFreCreationParams(freParams)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * @dev createNftWithDatatokenWithDispenser\n   *      Creates a new NFT, then a Datatoken, then a Dispenser, all in one call\n   *      Use this carefully, because if Dispenser creation fails, you are still going to pay a lot of gas\n   * @param address Caller address\n   * @param nftCreateData input data for NFT Creation\n   * @param dtParams input data for Datatoken Creation\n   * @param dispenserParams input data for Dispenser Creation\n   *  @return {Promise<TransactionReceipt>} transaction receipt\n   */\n  public async createNftWithDatatokenWithDispenser<G extends boolean = false>(\n    address: string,\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    dispenserParams: DispenserCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = this.getErcCreationParams(dtParams)\n\n    dispenserParams.maxBalance = Web3.utils.toWei(dispenserParams.maxBalance)\n    dispenserParams.maxTokens = Web3.utils.toWei(dispenserParams.maxTokens)\n\n    const estGas = await calculateEstimatedGas(\n      address,\n      this.contract.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      address,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  private getErcCreationParams(dtParams: DatatokenCreateParams): any {\n    let name: string, symbol: string\n    // Generate name & symbol if not present\n    if (!dtParams.name || !dtParams.symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n    return {\n      templateIndex: dtParams.templateIndex,\n      strings: [dtParams.name || name, dtParams.symbol || symbol],\n      addresses: [\n        dtParams.minter,\n        dtParams.paymentCollector,\n        dtParams.mpFeeAddress,\n        dtParams.feeToken\n      ],\n      uints: [Web3.utils.toWei(dtParams.cap), Web3.utils.toWei(dtParams.feeAmount)],\n      bytess: []\n    }\n  }\n\n  private getFreCreationParams(freParams: FreCreationParams): any {\n    if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = freParams.withMint === false ? 0 : 1\n\n    return {\n      fixedPriceAddress: freParams.fixedRateAddress,\n      addresses: [\n        freParams.baseTokenAddress,\n        freParams.owner,\n        freParams.marketFeeCollector,\n        freParams.allowedConsumer\n      ],\n      uints: [\n        freParams.baseTokenDecimals,\n        freParams.datatokenDecimals,\n        Web3.utils.toWei(freParams.fixedRate),\n        Web3.utils.toWei(freParams.marketFee),\n        withMint\n      ]\n    }\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veOceanABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veOCEAN.vy/veOCEAN.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeOcean extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veOceanABI.abi as AbiItem[]\n  }\n\n  /**\n   * Deposit `amount` tokens for `userAddress` and lock until `unlockTime`\n   * @param {String} userAddress user address\n   * @param {String} amount Amount of tokens to be locked\n   * @param {Number} unlockTime Timestamp for unlock\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async lockTokens<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.create_lock,\n      amountFormatted,\n      unlockTime\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.create_lock,\n      amountFormatted,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` tokens for `toAddress` and add to the existing lock\n   * Anyone (even a smart contract) can deposit for someone else, but cannot extend their locktime and deposit for a brand new user\n   * @param {String} fromUserAddress user address that sends the tx\n   * @param {String} toAddress user address to deposit for\n   * @param {String} amount Amount of tokens to be locked\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async depositFor<G extends boolean = false>(\n    fromUserAddress: string,\n    toAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.deposit_for,\n      toAddress,\n      amountFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.deposit_for,\n      toAddress,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` additional tokens for `userAddress` without modifying the unlock time\n   * @param {String} userAddress user address that sends the tx\n   * @param {String} amount Amount of tokens to be locked\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseAmount<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.increase_amount,\n      amountFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.increase_amount,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Extend the unlock time for `userAddress` to `unlockTime`\n   * @param {String} userAddress user address that sends the tx\n   * @param {Number} unlockTime Timestamp for new unlock time\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseUnlockTime<G extends boolean = false>(\n    userAddress: string,\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.increase_unlock_time,\n      unlockTime\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000, // sometimes, it's not enough\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.increase_unlock_time,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens for `userAddress`\n   * @param {String} userAddress user address that sends the tx\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async withdraw<G extends boolean = false>(\n    userAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.withdraw\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.withdraw\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get voting power for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getVotingPower(userAddress: string): Promise<number> {\n    const balance = await this.contract.methods.balanceOf(userAddress).call()\n    return balance\n  }\n\n  /** Get locked balance\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async getLockedAmount(userAddress: string): Promise<string> {\n    const balance = await this.contract.methods.locked(userAddress).call()\n    const balanceFormated = await this.unitsToAmount(\n      await this.getToken(),\n      balance.amount\n    )\n\n    return balanceFormated\n  }\n\n  /** Get untilLock for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async lockEnd(userAddress: string): Promise<number> {\n    const untilLock = await this.contract.methods.locked__end(userAddress).call()\n    return untilLock\n  }\n\n  /** Get total supply\n   * @return {Promise<number>}\n   */\n  public async totalSupply(): Promise<string> {\n    const supplyFormated = await this.unitsToAmount(\n      await this.getToken(),\n      await this.contract.methods.totalSupply().call()\n    )\n    return supplyFormated\n  }\n\n  /** Get token\n   * @return {Promise<string>}\n   */\n  public async getToken(): Promise<string> {\n    const tokenAddress = await this.contract.methods.token().call()\n    return tokenAddress\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veFeeABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeDistributor.vy/veFeeDistributor.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeDistributor extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veFeeABI.abi as AbiItem[]\n  }\n\n  /**\n   * Claim fees for `userAddress`\n   * Each call to claim look at a maximum of 50 user veOCEAN points.\n         For accounts with many veOCEAN related actions, this function\n         may need to be called more than once to claim all available\n         fees. In the `Claimed` event that fires, if `claim_epoch` is\n         less than `max_epoch`, the account may claim again\n   * @param {String} userAddress user address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claim<G extends boolean = false>(\n    userAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(userAddress, this.contract.methods.claim)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 20000,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claim\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Make multiple fee claims in a single call\n    Used to claim for many accounts at once, or to make\n         multiple claims for the same address when that address\n         has significant veOCEAN history\n   * @param {String} fromUserAddress user address that sends the tx\n   * @param {String} addresses array of addresses to claim\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMany<G extends boolean = false>(\n    fromUserAddress: string,\n    addresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claim_many,\n      addresses\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 20000,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claim_many,\n      addresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veFeeEstimate from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeEstimate.vy/veFeeEstimate.json'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { VeOcean } from './VeOcean'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeEstimate extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veFeeEstimate.abi as AbiItem[]\n  }\n\n  /**\n   * estimateClaim\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async estimateClaim(userAddress: string): Promise<string> {\n    const amount = await this.contract.methods.estimateClaim(userAddress).call()\n    const veOcean = new VeOcean(\n      await this.contract.methods.voting_escrow().call(),\n      this.web3\n    )\n    const amountFormated = await this.unitsToAmount(await veOcean.getToken(), amount)\n    return amountFormated\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport veAllocateABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veAllocate.sol/veAllocate.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeAllocate extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return veAllocateABI.abi as AbiItem[]\n  }\n\n  /**\n   * set a specific percentage of veOcean to a specific nft\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String} userAddress user address\n   * @param {String} amount Percentage used\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setAllocation<G extends boolean = false>(\n    userAddress: string,\n    amount: string,\n    nft: string,\n    chainId: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.setAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * set specific percetage of veOcean to multiple nfts\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String} userAddress user address\n   * @param {String[]} amount Array of percentages used\n   * @param {String[]} nft Array of NFT addresses\n   * @param {String[]} chainId Array of chainIds\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setBatchAllocation<G extends boolean = false>(\n    userAddress: string,\n    amount: string[],\n    nft: string[],\n    chainId: number[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      userAddress,\n      this.contract.methods.setBatchAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      userAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.setBatchAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get totalAllocation for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getTotalAllocation(userAddress: string): Promise<number> {\n    const allocation = await this.contract.methods.getTotalAllocation(userAddress).call()\n    return allocation\n  }\n\n  /** Get getveAllocation for address, nft, chainId\n   * @param {String} userAddress user address\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<number>}\n   */\n  public async getVeAllocation(\n    userAddress: string,\n    nft: string,\n    chainId: string\n  ): Promise<number> {\n    const allocation = await this.contract.methods\n      .getveAllocation(userAddress, nft, chainId)\n      .call()\n    return allocation\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport dfRewardsABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFRewards.sol/DFRewards.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n\n/**\n * Provides an interface for DFRewards contract\n */\nexport class DfRewards extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return dfRewardsABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for a token\n   * @param {String} userAddress user address\n   * @param {String} tokenAddress token address\n   * @return {Promise<string>}\n   */\n  public async getAvailableRewards(\n    userAddress: string,\n    tokenAddress: string\n  ): Promise<string> {\n    const rewards = await this.contract.methods\n      .claimable(userAddress, tokenAddress)\n      .call()\n    const rewardsFormated = await this.unitsToAmount(tokenAddress, rewards)\n\n    return rewardsFormated\n  }\n\n  /**\n   * claim rewards for any address\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddress token address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddress: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claimFor,\n      userAddress,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claimFor,\n      userAddress,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * allocate rewards to address.  An approve must exist before calling this function.\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String[]} userAddresses array of users that will receive rewards\n   * @param {String[]} amounts array of amounts\n   * @param {String} tokenAddress token address\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async allocateRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddresses: string[],\n    amounts: string[],\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    for (let i = 0; i < amounts.length; i++) {\n      amounts[i] = await this.amountToUnits(tokenAddress, amounts[i])\n    }\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.allocate,\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.allocate,\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { AbiItem } from 'web3-utils'\nimport dfStrategyV1ABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFStrategyV1.sol/DFStrategyV1.json'\nimport { calculateEstimatedGas, sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate } from '../../@types'\n\n/**\n * Provides an interface for dfStrategyV1 contract\n */\nexport class DfStrategyV1 extends SmartContractWithAddress {\n  getDefaultAbi(): AbiItem | AbiItem[] {\n    return dfStrategyV1ABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for multiple tokens\n   * @param {String} userAddress user address\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<string[]>}\n   */\n  public async getMultipleAvailableRewards(\n    userAddress: string,\n    tokenAddresses: string[]\n  ): Promise<string[]> {\n    const rewards = await this.contract.methods\n      .claimables(userAddress, tokenAddresses)\n      .call()\n    const rewardsFormated: string[] = []\n    for (let i = 0; i < rewards.length; i++) {\n      rewardsFormated.push(await this.unitsToAmount(tokenAddresses[i], rewards[i]))\n    }\n    return rewardsFormated\n  }\n\n  /**\n   * claim multiple token rewards for any address\n   * @param {String} fromUserAddress user that generates the tx\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMultipleRewards<G extends boolean = false>(\n    fromUserAddress: string,\n    userAddress: string,\n    tokenAddresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await calculateEstimatedGas(\n      fromUserAddress,\n      this.contract.methods.claimMultiple,\n      userAddress,\n      tokenAddresses\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      fromUserAddress,\n      estGas + 1,\n      this.web3,\n      this.config?.gasFeeMultiplier,\n      this.contract.methods.claimMultiple,\n      userAddress,\n      tokenAddresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import fetch from 'cross-fetch'\nimport { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types'\n\nexport interface SearchQuery {\n  from?: number\n  size?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query: any\n  sort?: { [jsonPath: string]: string }\n  aggs?: any\n}\n\nexport class Aquarius {\n  public aquariusURL: string\n\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   \n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n     * @param {AbortSignal} signal abort signal\n   * @return {Promise<DDO>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param {string} did DID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async getAssetMetadata(did: string, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/metadata/' + did\n\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error(\n          'getAssetMetadata failed: ' + response.status + response.statusText\n        )\n      }\n    } catch (error) {\n      LoggerInstance.error('Error getting metadata: ', error)\n      throw new Error('Error getting metadata: ' + error)\n    }\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param  {SearchQuery} query Query to filter the DDOs.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async querySearch(query: SearchQuery, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/query'\n\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(query),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error('querySearch failed: ' + response.status + response.statusText)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error querying metadata: ', error)\n      throw new Error('Error querying metadata: ' + error)\n    }\n  }\n}\n","import Web3 from 'web3'\nimport fetch from 'cross-fetch'\nimport { LoggerInstance } from '../utils'\nimport {\n  Arweave,\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults,\n  ServiceEndpoint,\n  UrlFile,\n  UserCustomParameters,\n  Ipfs,\n  Smartcontract,\n  GraphqlQuery\n} from '../@types'\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await this.getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * Returns the service endpoints that exist in provider.\n   * @param {any} endpoints\n   * @return {Promise<ServiceEndpoint[]>}\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /** Gets current nonce\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<string> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      return (await response.json()).nonce.toString()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  public async signProviderRequest(\n    web3: Web3,\n    accountId: string,\n    message: string,\n    password?: string\n  ): Promise<string> {\n    const consumerMessage = web3.utils.soliditySha3({\n      t: 'bytes',\n      v: web3.utils.utf8ToHex(message)\n    })\n    const isMetaMask =\n      web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    if (isMetaMask)\n      return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    else return await web3.eth.sign(consumerMessage, accountId)\n  }\n\n  /** Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {number} chainId network's id so provider can choose the corresponding web3 object\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    chainId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path =\n      (this.getEndpointURL(serviceEndpoints, 'encrypt')\n        ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n        : null) + `?chainId=${chainId}`\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get DDO File details (if possible)\n   * @param {UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract} file one of the supported file structures\n   * @param {string} serviceId the id of the service for which to check the files\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {boolean} withChecksum if true, will return checksum of files content\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: string,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did, serviceId, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get URL details (if possible)\n   * @param {UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract} file one of the supported file structures\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {boolean} withChecksum if true, will return checksum of files content\n   * @param {AbortSignal} signal abort signal\n   * @param {any} headers headers key value pairs associated with the asset GET request\n   * @return {Promise<FileInfo[]>} urlDetails\n   */\n  public async getFileInfo(\n    file: UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal,\n    headers?: any\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { ...file, headers, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get Compute Environments\n   * @return {Promise<ComputeEnvironment[]>} urlDetails\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeEnvironment[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const envs: ComputeEnvironment[] = await response.json()\n      return envs\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Initialize a service request.\n   * @param {DDO | string} asset\n   * @param {number} serviceIndex\n   * @param {string} serviceType\n   * @param {string} consumerAddress\n   * @param {UserCustomParameters} userCustomParameters\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderInitialize>} ProviderInitialize data\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results: ProviderInitialize = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('Asset URL not found or not available.')\n    }\n  }\n\n  /** Initialize a compute request.\n   * @param {ComputeAsset} assets\n   * @param {ComputeAlgorithmber} algorithm\n   * @param {string} computeEnv\n   * @param {number} validUntil\n   * @param {string} providerUri Identifier of the asset to be registered in ocean\n   * @param {string} accountId\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm,\n      compute: { env: computeEnv, validUntil },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    try {\n      const response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const results = await response.json()\n      return results\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n  }\n\n  /** Gets fully signed URL for download\n   * @param {string} did\n   * @param {string} accountId\n   * @param {string} serviceId\n   * @param {number} fileIndex\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {UserCustomParameters} userCustomParameters\n   * @return {Promise<string>}\n   */\n  public async getDownloadUrl(\n    did: string,\n    accountId: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    web3: Web3,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const nonce = Date.now()\n    const signature = await this.signProviderRequest(web3, accountId, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${accountId}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} computeEnv\n   * @param {ComputeAlgorithm} algorithm\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeOutput} output\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStart(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (payload.additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    try {\n      const response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Compute start failed: ',\n        response.status,\n        response.statusText,\n        await response.json()\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    try {\n      const response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error('Compute stop failed:', response.status, response.statusText)\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${this.noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    try {\n      const response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Get compute status failed:',\n        response.status,\n        response.statusText\n      )\n      return null\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Web3} web3 Web3 instance\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    web3: Web3,\n    consumerAddress: string,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = Date.now()\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${consumerAddress}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did\n   * @param {string} consumerAddress\n   * @param {string} jobId\n   * @param {string} providerUri\n   * @param {Web3} web3\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    web3: Web3,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = await this.getNonce(\n      providerUri,\n      consumerAddress,\n      signal,\n      providerEndpoints,\n      serviceEndpoints\n    )\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(\n      web3,\n      consumerAddress,\n      signatureMessage\n    )\n    const payload = Object()\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    try {\n      const response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response?.ok) {\n        const params = await response.json()\n        return params\n      }\n      LoggerInstance.error(\n        'Delete compute job failed:',\n        response.status,\n        response.statusText\n      )\n      LoggerInstance.error('Payload was:', payload)\n      return null\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} string\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && (params.providerAddress || params.providerAddresses)) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n\n  private noZeroX(input: string): string {\n    return this.zeroXTransformer(input, false)\n  }\n\n  private zeroXTransformer(input = '', zeroOutput: boolean): string {\n    const { valid, output } = this.inputMatch(\n      input,\n      /^(?:0x)*([a-f0-9]+)$/i,\n      'zeroXTransformer'\n    )\n    return (zeroOutput && valid ? '0x' : '') + output\n  }\n\n  // Shared functions\n  private inputMatch(\n    input: string,\n    regexp: RegExp,\n    conversorName: string\n  ): { valid: boolean; output: string } {\n    if (typeof input !== 'string') {\n      LoggerInstance.debug('Not input string:')\n      LoggerInstance.debug(input)\n      throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n    }\n    const match = input.match(regexp)\n    if (!match) {\n      LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n      return { valid: false, output: input }\n    }\n    return { valid: true, output: match[1] }\n  }\n\n  private async getData(url: string): Promise<Response> {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    })\n  }\n}\n\nexport const ProviderInstance = new Provider()\n"],"names":["Config","nodeUri","providerAddress","metadataCacheUri","providerUri","web3Provider","oceanTokenAddress","nftFactoryAddress","datatokensABI","fixedRateExchangeAddress","fixedRateExchangeAddressABI","dispenserAddress","dispenserABI","opfCommunityFeeCollector","sideStakingAddress","startBlock","verbose","authMessage","authTokenExpiration","parityUri","threshold","chainId","network","subgraphUri","explorerUri","oceanTokenSymbol","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","gasFeeMultiplier","veAllocate","veOCEAN","veDelegation","veFeeDistributor","veDelegationProxy","DFRewards","DFStrategyV1","veFeeEstimate","ZERO_ADDRESS","GASLIMIT_DEFAULT","MAX_UINT_256","FEE_HISTORY_NOT_SUPPORTED","sendTx","from","estGas","web3","functionToSend","sendTxValue","gas","eth","getChainId","networkId","apply","send","getFeeHistory","feeHistory","baseFeePerGas","_feeHistory$baseFeePe","reward","_feeHistory$reward","_feeHistory$reward$","getFairGasPrice","gasPrice","aggressiveFee","BigNumber","_feeHistory$reward2","_feeHistory$reward2$","multipliedBy","maxPriorityFeePerGas","integerValue","ROUND_DOWN","toString","maxFeePerGas","plus","_feeHistory$baseFeePe2","MUMBAI_NETWORK_ID","POLYGON_NETWORK_ID","lte","MIN_GAS_FEE_POLYGON","err","message","LoggerInstance","log","calculateEstimatedGas","functionToEstimateGas","estimateGas","amountToUnits","token","amount","tokenDecimals","decimals","config","EXPONENTIAL_AT","times","exponentiatedBy","toFixed","tokenContract","Contract","minAbi","methods","call","unitsToAmount","amountFormatted","div","getGasPrice","x","setContractDefaults","contract","generateDtName","wordList","list","wordListDefault","random1","Math","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","generateDid","nftAddress","Web3","utils","toChecksumAddress","sha256","getHash","data","downloadFile","LogLevel","url","index","fetch","response","ok","Error","filename","headers","get","match","split","pop","arrayBuffer","downloadFileBrowser","method","headResponse","contentHeader","fileName","xhr","XMLHttpRequest","responseType","open","onload","blobURL","window","URL","createObjectURL","a","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","sleep","ms","Promise","resolve","setTimeout","Logger","logLevel","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","Log","warn","Warn","error","verb","level","console","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","signHash","address","sign","signedMessage","r","substr","slice","s","v","tokenAddress","allowanceWei","account","spender","allowance","balance","balanceOf","trxReceipt","transfer","recipient","approveWei","force","result","approve","e","currentAllowence","gt","Decimal","toNumber","greaterThanOrEqualTo","configHelperNetworksBase","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","ERC721Factory","OPFCommunityFeeCollector","FixedPrice","Dispenser","Ocean","process","env","AQUARIUS_URI","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","find","CustomContractAddressess","SmartContract","abi","getDefaultAbi","_this6$config","getContract","SmartContractWithAddress","_this","DispenserAbi","status","dtAdress","_this2","maxTokens","fromWei","maxBalance","create","dtAddress","allowedSwapper","_this4","toWei","_this4$config","activate","_this6","deactivate","_this8","_this8$config","setAllowedSwapper","newAllowedSwapper","_this10","_this10$config","dispense","destination","_this12","_this12$config","ownerWithdraw","_this14","_this14$config","isDispensable","datatoken","active","String","greaterThan","isMinter","FixedRateExchange","FixedRateExchangeAbi","generateExchangeId","baseToken","buyDatatokens","exchangeId","datatokenAmount","maxBaseTokenAmount","consumeMarketAddress","consumeMarketFee","getExchange","exchange","consumeMarketFeeFormatted","dtDecimals","dtAmountFormatted","btDecimals","maxBtFormatted","buyDT","sellDatatokens","minBaseTokenAmount","minBtFormatted","sellDT","getNumberOfExchanges","setRate","newRate","toggleExchangeState","_this16","_this16$config","getRate","_this18","weiRate","getDatatokenSupply","_this20","getDTSupply","dtSupply","getBasetokenSupply","_this22","getBTSupply","btSupply","getAllowedSwapper","calcBaseInGivenDatatokensOut","_this26","fixedRateExchange","_this25$contract$meth","calcBaseInGivenOutDT","_calcBaseInGivenOutDT","outDT","baseTokenAmount","marketFeeAmount","oceanFeeAmount","consumeMarketFeeAmount","getAmountBasetokensOut","_this28","_this27$contract$meth","calcBaseOutGivenInDT","_calcBaseOutGivenInDT","_this30","dtBalance","btBalance","fixedRate","getFeesInfo","_this32","feesInfo","opcFee","marketFee","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","activateMint","_this38","withMint","toggleMintState","_this38$config","deactivateMint","_this40","_this40$config","collectBasetokens","_this42","fixedrate","amountWei","collectBT","_this42$config","collectDatatokens","_this44","collectDT","_this44$config","collectMarketFee","_this46","_this46$config","collectOceanFee","_this48","_this48$config","getOPCCollector","opcCollector","getRouter","router","getExchangeOwner","_this53$getExchange","exchangeOwner","updateMarketFee","newMarketFee","_this56","_this56$config","updateMarketFeeCollector","newMarketFeeCollector","_this58","_this58$config","Router","FactoryRouter","buyDatatokenBatch","operations","buyDTBatch","_this2$config","isApprovedToken","isFixedPrice","isFixedRateContract","getOwner","routerOwner","getNFTFactory","factory","addApprovedToken","_this11$getOwner","removeApprovedToken","_this13$getOwner","addFixedRateContract","_this15$getOwner","removeFixedRateContract","_this17$getOwner","_this18$config","addDispenserContract","_this19$getOwner","_this20$config","removeDispenserContract","_this21$getOwner","_this22$config","getOPCFee","getCurrentOPCFee","swapOceanFee","updateOPCFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","_this27$getOwner","_this28$config","Nft","ERC721Template","createDatatoken","minter","paymentCollector","mpFeeAddress","feeToken","feeAmount","cap","templateIndex","getNftPermissions","_this$getNftPermissio","deployERC20","nftContract","createERC20","events","_trxReceipt$events","TokenCreated","_trxReceipt$events$To","returnValues","_trxReceipt$events$To2","addManager","manager","getNftOwner","_this3$getNftOwner","removeManager","_this5$getNftOwner","addDatatokenDeployer","datatokenDeployer","_this7$getNftPermissi","addToCreateERC20List","removeDatatokenDeployer","_temp","_this9$getNftPermissi2","removeFromCreateERC20List","_this9$getNftPermissi","addMetadataUpdater","metadataUpdater","_this11$getNftPermiss","addToMetadataList","removeMetadataUpdater","_temp3","_this13$getNftPermiss2","updateMetadata","removeFromMetadataList","_this13$getNftPermiss","addStoreUpdater","storeUpdater","_this15$getNftPermiss","addTo725StoreList","removeStoreUpdater","_temp5","_this17$getNftPermiss2","store","removeFrom725StoreList","_this17$getNftPermiss","cleanPermissions","_this19$getNftOwner","transferNft","nftOwner","nftReceiver","tokenId","_this21$getNftOwner","tokenIdentifier","transferFrom","safeTransferNft","_this24","_this23$getNftOwner","safeTransferFrom","_this24$config","setMetadata","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","_this25$getNftPermiss","setMetaData","_this26$config","setMetadataAndTokenURI","metadataAndTokenURI","_this27$getNftPermiss","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetadataState","_this29$getNftPermiss","setMetaDataState","_this30$config","setTokenURI","_this32$config","ownerOf","getPermissions","getMetadata","getMetaData","isDatatokenDeployer","isERC20Deployer","setData","key","value","_this41$getNftPermiss","keyHash","keccak256","valueHex","asciiToHex","setNewData","getData","hexToAscii","getTokenURI","id","tokenURI","Datatoken","abiEnterprise","nft","ERC20TemplateEnterprise","ERC20Template","_proto","dtContract","_this3","_this3$config","createFixedRate","fixedRateParams","_this5","allowedConsumer","fixedRateAddress","baseTokenAddress","owner","marketFeeCollector","baseTokenDecimals","datatokenDecimals","_this5$config","createDispenser","dispenserParams","_this7","_this7$config","mint","toAddress","_this9","_this8$getPermissions","getCap","capAvailble","gte","_this9$config","addMinter","_this11","_this10$isDatatokenDe","_this11$config","removeMinter","_this13","_this12$isDatatokenDe","_this13$config","addPaymentManager","paymentManager","_this15","_this14$isDatatokenDe","_this15$config","removePaymentManager","_this17","_this16$isDatatokenDe","_this17$config","setPaymentCollector","_this19","nftPermissions","isPaymentManager","isNftOwner","_this19$config","_this18$nft$getNftOwn","_this18$getPermission","getNFTAddress","getPaymentCollector","weiAmount","transferWei","_this25","_this25$config","startOrder","consumer","serviceIndex","providerFees","_this27","consumeMarketFeeAddress","consumeMarketFeeToken","_this27$config","reuseOrder","orderTxId","_this29","_this29$config","buyFromFreAndOrder","orderParams","freParams","_this31","getFreOrderParams","freContractParams","_this31$config","buyFromDispenserAndOrder","dispenserContract","_this33","_this33$config","_this35","_this35$config","_this37","_this36$nft2","_this36$nft$getNftOwn","_this37$config","permissions","_this41","getDecimals","getSymbol","getName","getERC721Address","datatokenAddress","_this53","setPublishingMarketFee","publishMarketFeeAddress","publishMarketFeeToken","publishMarketFeeAmount","_this55","getPublishingMarketFee","_dtContract$methods$g","_this55$config","publishingMarketFee","exchangeContract","_this59","swapMarketFee","marketFeeAddress","NftFactory","createNFT","nftData","getCurrentNFTTemplateCount","_nftData$templateInde2","getNFTTemplate","_this$getNFTTemplate","deployERC721Contract","transferable","NFTCreated","_trxReceipt$events$NF","_trxReceipt$events$NF2","getCurrentNFTCount","getCurrentTokenCount","getCurrentTokenTemplateCount","getCurrentTemplateCount","getTokenTemplate","checkDatatoken","erc20List","checkNFT","erc721List","addNFTTemplate","templateAddress","add721TokenTemplate","disableNFTTemplate","_this23$getOwner","disable721TokenTemplate","reactivateNFTTemplate","_this25$getOwner","reactivate721TokenTemplate","addTokenTemplate","disableTokenTemplate","_this29$getOwner","_this29$getTokenTempl","reactivateTokenTemplate","_this31$getOwner","_this31$getTokenTempl","startMultipleTokenOrder","orders","_this34","_this34$config","createNftWithDatatoken","nftCreateData","dtParams","ercCreateData","_this36","getErcCreationParams","createNftWithErc20","_this36$config","createNftWithDatatokenWithFixedRate","fixedData","getFreCreationParams","createNftWithErc20WithFixedRate","createNftWithDatatokenWithDispenser","createNftWithErc20WithDispenser","strings","addresses","uints","bytess","fixedPriceAddress","VeOcean","veOceanABI","lockTokens","userAddress","unlockTime","getToken","create_lock","depositFor","fromUserAddress","deposit_for","increaseAmount","increase_amount","increaseUnlockTime","increase_unlock_time","withdraw","getVotingPower","getLockedAmount","locked","lockEnd","locked__end","totalSupply","VeFeeDistributor","veFeeABI","claim","claimMany","claim_many","VeFeeEstimate","estimateClaim","voting_escrow","veOcean","VeAllocate","veAllocateABI","setAllocation","setBatchAllocation","getTotalAllocation","getVeAllocation","getveAllocation","_settle","pact","state","bind","DfRewards","dfRewardsABI","getAvailableRewards","claimable","rewards","claimRewards","claimFor","allocateRewards","userAddresses","amounts","allocate","i","DfStrategyV1","dfStrategyV1ABI","getMultipleAvailableRewards","tokenAddresses","claimables","rewardsFormated","push","_push","claimMultipleRewards","claimMultiple","o","Aquarius","aquariusURL","did","signal","path","json","waitForAqua","txid","tries","ddo","event","validate","jsonResponse","valid","JSON","stringify","hash","proof","validatorAddress","publicKey","errors","getAssetMetadata","statusText","querySearch","query","Provider","getEndpoints","endpoints","getEndpointURL","servicesEndpoints","serviceName","getServiceEndpoints","providerEndpoint","serviceEndpoints","urlPath","getNonce","consumerAddress","providerEndpoints","nonce","signProviderRequest","accountId","password","consumerMessage","soliditySha3","t","utf8ToHex","currentProvider","isMetaMask","personal","encrypt","text","checkDidFiles","serviceId","withChecksum","args","checksum","files","results","getFileInfo","file","getComputeEnvironments","_this12$getEndpointUR","initialize","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","initializeCompute","assets","algorithm","providerData","datasets","compute","getDownloadUrl","transferTxId","downloadUrl","Date","now","signature","consumeUrl","computeStart","dataset","additionalDatasets","output","computeStartUrl","signatureMessage","documentId","payload","Object","environment","_error","params","computeStop","jobId","computeStopUrl","noZeroX","computeStatus","computeStatusUrl","getComputeResultUrl","computeResultUrl","resultUrl","computeDelete","computeDeleteUrl","isValidProvider","providerAddresses","input","zeroXTransformer","zeroOutput","inputMatch","regexp","conversorName","ProviderInstance"],"mappings":"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"}